/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge;

import com.verizon.m5gedge.controllers.OauthAuthorizationController;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.models.OauthScopeEnum;
import com.verizon.m5gedge.models.OauthToken;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.core.authentication.HeaderAuth;
import java.io.IOException;
import java.util.Base64;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * Utility class for OAuth 2 authorization and token management.
 */
public class ClientCredentialsAuthManager extends HeaderAuth implements ClientCredentialsAuth {

    /**
     * Private instance of OAuth 2 API controller.
     */
    private OauthAuthorizationController oAuthApi;

    private String oauthClientId;

    private String oauthClientSecret;

    private OauthToken oauthToken;

    private List<OauthScopeEnum> oauthScopes;

    /**
     * Constructor.
     */
    public ClientCredentialsAuthManager(String oauthClientId, String oauthClientSecret,
            OauthToken oAuthToken, List<OauthScopeEnum> oauthScopes) {
        super(Collections.singletonMap("Authorization",
                getAuthorizationHeader(oAuthToken)));
        this.oauthClientId = oauthClientId;
        this.oauthClientSecret = oauthClientSecret;
        this.oauthToken = oAuthToken;
        this.oauthScopes = oauthScopes;
    }

    /**
    * Apply GlobalConfiguration for token management.
    * @param config GlobalConfiguration instance
    */
    protected void applyGlobalConfiguration(GlobalConfiguration config) {
        this.oAuthApi = new OauthAuthorizationController(config);
    }


    /**
     * String value for oauthClientId.
     * @return oauthClientId
     */
    public String getOauthClientId() {
        return oauthClientId;
    }

    /**
     * String value for oauthClientSecret.
     * @return oauthClientSecret
     */
    public String getOauthClientSecret() {
        return oauthClientSecret;
    }

    /**
     * OauthToken value for oauthToken.
     * @return oauthToken
     */
    public OauthToken getOauthToken() {
        return oauthToken;
    }

    /**
     * List of OauthScopeEnum value for oauthScopes.
     * @return oauthScopes
     */
    public List<OauthScopeEnum> getOauthScopes() {
        return oauthScopes;
    }

    /**
     * Checks if provided credentials matched with existing ones.
     * @param oauthClientId String value for credentials.
     * @param oauthClientSecret String value for credentials.
     * @param oauthToken OauthToken value for credentials.
     * @param oauthScopes List of OauthScopeEnum value for credentials.
     * @return true if credentials matched.
     */
    public boolean equals(String oauthClientId, String oauthClientSecret, OauthToken oauthToken,
            List<OauthScopeEnum> oauthScopes) {
        return oauthClientId.equals(getOauthClientId())
                && oauthClientSecret.equals(getOauthClientSecret())
                && ((getOauthToken() == null && oauthToken == null)
                        || (getOauthToken() != null && oauthToken != null
                                && oauthToken.toString().equals(getOauthToken().toString())))
                && ((getOauthScopes() == null && oauthScopes == null)
                        || (getOauthScopes() != null && oauthScopes != null
                                && oauthScopes.equals(getOauthScopes())));
    }

    /**
     * Converts this ClientCredentialsAuthManager into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ClientCredentialsAuthManager [" + "oauthClientId=" + oauthClientId
                + ", oauthClientSecret=" + oauthClientSecret + ", oauthToken=" + oauthToken
                + ", oauthScopes=" + oauthScopes + "]";
    }

    /**
     * Fetch the OAuth token asynchronously.
     * @param additionalParameters Additional parameters to send during authorization.
     */
    public CompletableFuture<OauthToken> fetchTokenAsync(
            final Map<String, Object> additionalParameters) {
        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>()
                : additionalParameters;

        return oAuthApi.requestTokenAsync(
            getBasicAuthForClient(),
            stringJoin(oauthScopes, " "),
            aparams).thenApply(token -> {
                return token.getResult();
            });
    }

    /**
     * Fetch the OAuth token asynchronously.
     */
    public CompletableFuture<OauthToken> fetchTokenAsync() {
        return fetchTokenAsync(null);
    }

    /**
     * Fetch the OAuth token.
     * @param additionalParameters Additional parameters to send during authorization.
     */
    public OauthToken fetchToken(Map<String, Object> additionalParameters)
            throws ApiException, IOException {
        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>()
                : additionalParameters;

        OauthToken token = oAuthApi.requestToken(
            getBasicAuthForClient(),
            stringJoin(oauthScopes, " "),
            aparams).getResult();

        if (token.getExpiresIn() != null && token.getExpiresIn() != 0) {
            token.setExpiry((System.currentTimeMillis() / 1000L) + token.getExpiresIn());
        }

        return token;
    }

    /**
     * Fetch the OAuth token.
     */
    public OauthToken fetchToken() throws ApiException, IOException {
        return fetchToken(null);
    }

    /**
     * Build authorization header value for basic auth.
     * @return Authorization header value for this client.
     */
    private String getBasicAuthForClient() {
        String val = oauthClientId + ":" + oauthClientSecret;
        return "Basic " + new String(Base64.getEncoder().encodeToString(val.getBytes()));
    }

    /**
     * Join string collection elements using delimiter.
     * @param col String collection to join.
     * @param delim Delimiter.
     * @return String joined by delimiter.
     */
    private String stringJoin(Collection<?> col, String delim) {
        if (col == null) {
            return null;
        }
        StringBuilder sb = new StringBuilder();
        Iterator<?> iter = col.iterator();
        if (iter.hasNext()) {
            sb.append(iter.next().toString());
        }
        while (iter.hasNext()) {
            sb.append(delim);
            sb.append(iter.next().toString());
        }
        return sb.toString();
    }

    /**
     * Has the OAuth token expired?.
     * @return True if expired
     */
    public boolean isTokenExpired() {
        if (getOauthToken() == null) { 
            throw new IllegalStateException("OAuth token is missing.");
        }

        return getOauthToken().getExpiry() != null 
            && getOauthToken().getExpiry() < (System.currentTimeMillis() / 1000L); 
    }

    /**
    * Create authorization header for API calls.
    * @param token OAuth token
    * @return Authorization header
    */
    private static String getAuthorizationHeader(OauthToken token) {
        if (token == null) {
            return null;
        }
        return "Bearer " + token.getAccessToken();
    }

    /**
    * Validate the authentication on the httpRequest
    */
    @Override
    public void validate() {
        if (getOauthToken() == null) {
            throw new IllegalStateException(
                "Client is not authorized.An OAuth token is needed to make API calls.");
        }

        if (isTokenExpired()) {
            throw new IllegalStateException(
                "OAuth token is expired. A valid token is needed to make API calls.");
        }
     }

}
