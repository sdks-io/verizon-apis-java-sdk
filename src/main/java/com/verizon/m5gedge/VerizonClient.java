/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge;

import com.verizon.m5gedge.authentication.ThingspaceOauthCredentials;
import com.verizon.m5gedge.authentication.ThingspaceOauthManager;
import com.verizon.m5gedge.authentication.ThingspaceOauthModel;
import com.verizon.m5gedge.authentication.VZM2mTokenCredentials;
import com.verizon.m5gedge.authentication.VZM2mTokenManager;
import com.verizon.m5gedge.authentication.VZM2mTokenModel;
import com.verizon.m5gedge.controllers.AccountDevicesController;
import com.verizon.m5gedge.controllers.AccountRequestsController;
import com.verizon.m5gedge.controllers.AccountSubscriptionsController;
import com.verizon.m5gedge.controllers.AccountsController;
import com.verizon.m5gedge.controllers.AnomalySettingsController;
import com.verizon.m5gedge.controllers.AnomalyTriggersController;
import com.verizon.m5gedge.controllers.AnomalyTriggersV2Controller;
import com.verizon.m5gedge.controllers.BillingController;
import com.verizon.m5gedge.controllers.CampaignsV2Controller;
import com.verizon.m5gedge.controllers.CampaignsV3Controller;
import com.verizon.m5gedge.controllers.ClientLoggingController;
import com.verizon.m5gedge.controllers.CloudConnectorDevicesController;
import com.verizon.m5gedge.controllers.CloudConnectorSubscriptionsController;
import com.verizon.m5gedge.controllers.ConfigurationFilesController;
import com.verizon.m5gedge.controllers.ConnectivityCallbacksController;
import com.verizon.m5gedge.controllers.DeviceActionsController;
import com.verizon.m5gedge.controllers.DeviceDiagnosticsController;
import com.verizon.m5gedge.controllers.DeviceGroupsController;
import com.verizon.m5gedge.controllers.DeviceLocationCallbacksController;
import com.verizon.m5gedge.controllers.DeviceManagementController;
import com.verizon.m5gedge.controllers.DeviceMonitoringController;
import com.verizon.m5gedge.controllers.DeviceProfileManagementController;
import com.verizon.m5gedge.controllers.DeviceReportsController;
import com.verizon.m5gedge.controllers.DeviceSMSMessagingController;
import com.verizon.m5gedge.controllers.DeviceServiceManagementController;
import com.verizon.m5gedge.controllers.DevicesLocationSubscriptionsController;
import com.verizon.m5gedge.controllers.DevicesLocationsController;
import com.verizon.m5gedge.controllers.DiagnosticsCallbacksController;
import com.verizon.m5gedge.controllers.DiagnosticsFactoryResetController;
import com.verizon.m5gedge.controllers.DiagnosticsHistoryController;
import com.verizon.m5gedge.controllers.DiagnosticsObservationsController;
import com.verizon.m5gedge.controllers.DiagnosticsSettingsController;
import com.verizon.m5gedge.controllers.DiagnosticsSubscriptionsController;
import com.verizon.m5gedge.controllers.EUICCDeviceProfileManagementController;
import com.verizon.m5gedge.controllers.ExclusionsController;
import com.verizon.m5gedge.controllers.FirmwareV1Controller;
import com.verizon.m5gedge.controllers.FirmwareV3Controller;
import com.verizon.m5gedge.controllers.FixedWirelessQualificationController;
import com.verizon.m5gedge.controllers.GlobalReportingController;
import com.verizon.m5gedge.controllers.HyperPreciseLocationCallbacksController;
import com.verizon.m5gedge.controllers.M5gBIDeviceActionsController;
import com.verizon.m5gedge.controllers.M5gEdgePlatformsController;
import com.verizon.m5gedge.controllers.MV2TriggersController;
import com.verizon.m5gedge.controllers.ManagingeSIMProfilesController;
import com.verizon.m5gedge.controllers.OauthAuthorizationController;
import com.verizon.m5gedge.controllers.PWNController;
import com.verizon.m5gedge.controllers.PerformanceMetricsController;
import com.verizon.m5gedge.controllers.PromotionPeriodInformationController;
import com.verizon.m5gedge.controllers.RetrievetheTriggersController;
import com.verizon.m5gedge.controllers.SIMActionsController;
import com.verizon.m5gedge.controllers.SIMSecureforIoTLicensesController;
import com.verizon.m5gedge.controllers.SMSController;
import com.verizon.m5gedge.controllers.ServerLoggingController;
import com.verizon.m5gedge.controllers.ServiceEndpointsController;
import com.verizon.m5gedge.controllers.ServicePlansController;
import com.verizon.m5gedge.controllers.ServiceProfilesController;
import com.verizon.m5gedge.controllers.SessionManagementController;
import com.verizon.m5gedge.controllers.SoftwareManagementCallbacksV1Controller;
import com.verizon.m5gedge.controllers.SoftwareManagementCallbacksV2Controller;
import com.verizon.m5gedge.controllers.SoftwareManagementCallbacksV3Controller;
import com.verizon.m5gedge.controllers.SoftwareManagementLicensesV1Controller;
import com.verizon.m5gedge.controllers.SoftwareManagementLicensesV2Controller;
import com.verizon.m5gedge.controllers.SoftwareManagementLicensesV3Controller;
import com.verizon.m5gedge.controllers.SoftwareManagementReportsV1Controller;
import com.verizon.m5gedge.controllers.SoftwareManagementReportsV2Controller;
import com.verizon.m5gedge.controllers.SoftwareManagementReportsV3Controller;
import com.verizon.m5gedge.controllers.SoftwareManagementSubscriptionsV1Controller;
import com.verizon.m5gedge.controllers.SoftwareManagementSubscriptionsV2Controller;
import com.verizon.m5gedge.controllers.SoftwareManagementSubscriptionsV3Controller;
import com.verizon.m5gedge.controllers.TargetsController;
import com.verizon.m5gedge.controllers.ThingSpaceQualityofServiceAPIActionsController;
import com.verizon.m5gedge.controllers.UpdateTriggersController;
import com.verizon.m5gedge.controllers.UsageTriggerManagementController;
import com.verizon.m5gedge.controllers.WirelessNetworkPerformanceController;
import com.verizon.m5gedge.http.client.HttpCallback;
import com.verizon.m5gedge.http.client.HttpClientConfiguration;
import com.verizon.m5gedge.http.client.ReadonlyHttpClientConfiguration;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.authentication.Authentication;
import io.apimatic.coreinterfaces.compatibility.CompatibilityFactory;
import io.apimatic.coreinterfaces.http.HttpClient;
import io.apimatic.okhttpclient.adapter.OkClient;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class VerizonClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private M5gEdgePlatformsController m5gEdgePlatforms;
    private ServiceEndpointsController serviceEndpoints;
    private ServiceProfilesController serviceProfiles;
    private DeviceManagementController deviceManagement;
    private AccountsController accounts;
    private DeviceGroupsController deviceGroups;
    private SMSController sMS;
    private SessionManagementController sessionManagement;
    private ConnectivityCallbacksController connectivityCallbacks;
    private AccountRequestsController accountRequests;
    private ServicePlansController servicePlans;
    private DeviceDiagnosticsController deviceDiagnostics;
    private DeviceProfileManagementController deviceProfileManagement;
    private DeviceMonitoringController deviceMonitoring;
    private EUICCDeviceProfileManagementController eUICCDeviceProfileManagement;
    private DevicesLocationsController devicesLocations;
    private ExclusionsController exclusions;
    private DevicesLocationSubscriptionsController devicesLocationSubscriptions;
    private DeviceLocationCallbacksController deviceLocationCallbacks;
    private UsageTriggerManagementController usageTriggerManagement;
    private BillingController billing;
    private SoftwareManagementSubscriptionsV1Controller softwareManagementSubscriptionsV1;
    private SoftwareManagementLicensesV1Controller softwareManagementLicensesV1;
    private FirmwareV1Controller firmwareV1;
    private SoftwareManagementCallbacksV1Controller softwareManagementCallbacksV1;
    private SoftwareManagementReportsV1Controller softwareManagementReportsV1;
    private SoftwareManagementSubscriptionsV2Controller softwareManagementSubscriptionsV2;
    private SoftwareManagementLicensesV2Controller softwareManagementLicensesV2;
    private CampaignsV2Controller campaignsV2;
    private SoftwareManagementCallbacksV2Controller softwareManagementCallbacksV2;
    private SoftwareManagementReportsV2Controller softwareManagementReportsV2;
    private ClientLoggingController clientLogging;
    private ServerLoggingController serverLogging;
    private ConfigurationFilesController configurationFiles;
    private SoftwareManagementSubscriptionsV3Controller softwareManagementSubscriptionsV3;
    private SoftwareManagementLicensesV3Controller softwareManagementLicensesV3;
    private CampaignsV3Controller campaignsV3;
    private SoftwareManagementReportsV3Controller softwareManagementReportsV3;
    private FirmwareV3Controller firmwareV3;
    private AccountDevicesController accountDevices;
    private SoftwareManagementCallbacksV3Controller softwareManagementCallbacksV3;
    private SIMSecureforIoTLicensesController sIMSecureforIoTLicenses;
    private AccountSubscriptionsController accountSubscriptions;
    private PerformanceMetricsController performanceMetrics;
    private DiagnosticsSubscriptionsController diagnosticsSubscriptions;
    private DiagnosticsObservationsController diagnosticsObservations;
    private DiagnosticsHistoryController diagnosticsHistory;
    private DiagnosticsSettingsController diagnosticsSettings;
    private DiagnosticsCallbacksController diagnosticsCallbacks;
    private DiagnosticsFactoryResetController diagnosticsFactoryReset;
    private TargetsController targets;
    private CloudConnectorSubscriptionsController cloudConnectorSubscriptions;
    private CloudConnectorDevicesController cloudConnectorDevices;
    private DeviceServiceManagementController deviceServiceManagement;
    private DeviceReportsController deviceReports;
    private HyperPreciseLocationCallbacksController hyperPreciseLocationCallbacks;
    private AnomalySettingsController anomalySettings;
    private AnomalyTriggersController anomalyTriggers;
    private AnomalyTriggersV2Controller anomalyTriggersV2;
    private WirelessNetworkPerformanceController wirelessNetworkPerformance;
    private FixedWirelessQualificationController fixedWirelessQualification;
    private ManagingeSIMProfilesController managingeSIMProfiles;
    private DeviceSMSMessagingController deviceSMSMessaging;
    private DeviceActionsController deviceActions;
    private ThingSpaceQualityofServiceAPIActionsController thingSpaceQualityofServiceAPIActions;
    private PWNController pWN;
    private PromotionPeriodInformationController promotionPeriodInformation;
    private RetrievetheTriggersController retrievetheTriggers;
    private UpdateTriggersController updateTriggers;
    private SIMActionsController sIMActions;
    private GlobalReportingController globalReporting;
    private MV2TriggersController mV2Triggers;
    private M5gBIDeviceActionsController m5gBIDeviceActions;
    private OauthAuthorizationController oauthAuthorization;

    private static final CompatibilityFactory compatibilityFactory = new CompatibilityFactoryImpl();

    private static String userAgent = "APIMATIC 3.0";

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * ThingspaceOauthManager.
     */
    private ThingspaceOauthManager thingspaceOauthManager;

    /**
     * The instance of ThingspaceOauthModel.
     */
    private ThingspaceOauthModel thingspaceOauthModel;

    /**
     * VZM2MTokenManager.
     */
    private VZM2mTokenManager vZM2mTokenManager;

    /**
     * The instance of VZM2mTokenModel.
     */
    private VZM2mTokenModel vZM2mTokenModel;

    /**
     * Map of authentication Managers.
     */
    private Map<String, Authentication> authentications = new HashMap<String, Authentication>();

    /**
     * Callback to be called before and after the HTTP call for an endpoint is made.
     */
    private final HttpCallback httpCallback;

    private VerizonClient(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig,
            ThingspaceOauthModel thingspaceOauthModel, VZM2mTokenModel vZM2mTokenModel,
            HttpCallback httpCallback) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;
        this.httpCallback = httpCallback;

        this.thingspaceOauthModel = thingspaceOauthModel;
        this.vZM2mTokenModel = vZM2mTokenModel;

        this.thingspaceOauthManager = new ThingspaceOauthManager(thingspaceOauthModel);
        this.authentications.put("thingspace_oauth", thingspaceOauthManager);

        this.vZM2mTokenManager = new VZM2mTokenManager(vZM2mTokenModel);
        this.authentications.put("VZ-M2M-Token", vZM2mTokenManager);

        GlobalConfiguration globalConfig = new GlobalConfiguration.Builder()
                .httpClient(httpClient).baseUri(server -> getBaseUri(server))
                .compatibilityFactory(compatibilityFactory)
                .authentication(this.authentications)
                .callback(httpCallback)
                .userAgent(userAgent)
                .build();
        this.thingspaceOauthManager.applyGlobalConfiguration(globalConfig);

        m5gEdgePlatforms = new M5gEdgePlatformsController(globalConfig);
        serviceEndpoints = new ServiceEndpointsController(globalConfig);
        serviceProfiles = new ServiceProfilesController(globalConfig);
        deviceManagement = new DeviceManagementController(globalConfig);
        accounts = new AccountsController(globalConfig);
        deviceGroups = new DeviceGroupsController(globalConfig);
        sMS = new SMSController(globalConfig);
        sessionManagement = new SessionManagementController(globalConfig);
        connectivityCallbacks = new ConnectivityCallbacksController(globalConfig);
        accountRequests = new AccountRequestsController(globalConfig);
        servicePlans = new ServicePlansController(globalConfig);
        deviceDiagnostics = new DeviceDiagnosticsController(globalConfig);
        deviceProfileManagement = new DeviceProfileManagementController(globalConfig);
        deviceMonitoring = new DeviceMonitoringController(globalConfig);
        eUICCDeviceProfileManagement = new EUICCDeviceProfileManagementController(globalConfig);
        devicesLocations = new DevicesLocationsController(globalConfig);
        exclusions = new ExclusionsController(globalConfig);
        devicesLocationSubscriptions = new DevicesLocationSubscriptionsController(globalConfig);
        deviceLocationCallbacks = new DeviceLocationCallbacksController(globalConfig);
        usageTriggerManagement = new UsageTriggerManagementController(globalConfig);
        billing = new BillingController(globalConfig);
        softwareManagementSubscriptionsV1 = new SoftwareManagementSubscriptionsV1Controller(
                globalConfig);
        softwareManagementLicensesV1 = new SoftwareManagementLicensesV1Controller(globalConfig);
        firmwareV1 = new FirmwareV1Controller(globalConfig);
        softwareManagementCallbacksV1 = new SoftwareManagementCallbacksV1Controller(globalConfig);
        softwareManagementReportsV1 = new SoftwareManagementReportsV1Controller(globalConfig);
        softwareManagementSubscriptionsV2 = new SoftwareManagementSubscriptionsV2Controller(
                globalConfig);
        softwareManagementLicensesV2 = new SoftwareManagementLicensesV2Controller(globalConfig);
        campaignsV2 = new CampaignsV2Controller(globalConfig);
        softwareManagementCallbacksV2 = new SoftwareManagementCallbacksV2Controller(globalConfig);
        softwareManagementReportsV2 = new SoftwareManagementReportsV2Controller(globalConfig);
        clientLogging = new ClientLoggingController(globalConfig);
        serverLogging = new ServerLoggingController(globalConfig);
        configurationFiles = new ConfigurationFilesController(globalConfig);
        softwareManagementSubscriptionsV3 = new SoftwareManagementSubscriptionsV3Controller(
                globalConfig);
        softwareManagementLicensesV3 = new SoftwareManagementLicensesV3Controller(globalConfig);
        campaignsV3 = new CampaignsV3Controller(globalConfig);
        softwareManagementReportsV3 = new SoftwareManagementReportsV3Controller(globalConfig);
        firmwareV3 = new FirmwareV3Controller(globalConfig);
        accountDevices = new AccountDevicesController(globalConfig);
        softwareManagementCallbacksV3 = new SoftwareManagementCallbacksV3Controller(globalConfig);
        sIMSecureforIoTLicenses = new SIMSecureforIoTLicensesController(globalConfig);
        accountSubscriptions = new AccountSubscriptionsController(globalConfig);
        performanceMetrics = new PerformanceMetricsController(globalConfig);
        diagnosticsSubscriptions = new DiagnosticsSubscriptionsController(globalConfig);
        diagnosticsObservations = new DiagnosticsObservationsController(globalConfig);
        diagnosticsHistory = new DiagnosticsHistoryController(globalConfig);
        diagnosticsSettings = new DiagnosticsSettingsController(globalConfig);
        diagnosticsCallbacks = new DiagnosticsCallbacksController(globalConfig);
        diagnosticsFactoryReset = new DiagnosticsFactoryResetController(globalConfig);
        targets = new TargetsController(globalConfig);
        cloudConnectorSubscriptions = new CloudConnectorSubscriptionsController(globalConfig);
        cloudConnectorDevices = new CloudConnectorDevicesController(globalConfig);
        deviceServiceManagement = new DeviceServiceManagementController(globalConfig);
        deviceReports = new DeviceReportsController(globalConfig);
        hyperPreciseLocationCallbacks = new HyperPreciseLocationCallbacksController(globalConfig);
        anomalySettings = new AnomalySettingsController(globalConfig);
        anomalyTriggers = new AnomalyTriggersController(globalConfig);
        anomalyTriggersV2 = new AnomalyTriggersV2Controller(globalConfig);
        wirelessNetworkPerformance = new WirelessNetworkPerformanceController(globalConfig);
        fixedWirelessQualification = new FixedWirelessQualificationController(globalConfig);
        managingeSIMProfiles = new ManagingeSIMProfilesController(globalConfig);
        deviceSMSMessaging = new DeviceSMSMessagingController(globalConfig);
        deviceActions = new DeviceActionsController(globalConfig);
        thingSpaceQualityofServiceAPIActions = new ThingSpaceQualityofServiceAPIActionsController(
                globalConfig);
        pWN = new PWNController(globalConfig);
        promotionPeriodInformation = new PromotionPeriodInformationController(globalConfig);
        retrievetheTriggers = new RetrievetheTriggersController(globalConfig);
        updateTriggers = new UpdateTriggersController(globalConfig);
        sIMActions = new SIMActionsController(globalConfig);
        globalReporting = new GlobalReportingController(globalConfig);
        mV2Triggers = new MV2TriggersController(globalConfig);
        m5gBIDeviceActions = new M5gBIDeviceActionsController(globalConfig);
        oauthAuthorization = new OauthAuthorizationController(globalConfig);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of M5gEdgePlatformsController.
     * @return m5gEdgePlatforms
     */
    public M5gEdgePlatformsController getM5gEdgePlatformsController() {
        return m5gEdgePlatforms;
    }

    /**
     * Get the instance of ServiceEndpointsController.
     * @return serviceEndpoints
     */
    public ServiceEndpointsController getServiceEndpointsController() {
        return serviceEndpoints;
    }

    /**
     * Get the instance of ServiceProfilesController.
     * @return serviceProfiles
     */
    public ServiceProfilesController getServiceProfilesController() {
        return serviceProfiles;
    }

    /**
     * Get the instance of DeviceManagementController.
     * @return deviceManagement
     */
    public DeviceManagementController getDeviceManagementController() {
        return deviceManagement;
    }

    /**
     * Get the instance of AccountsController.
     * @return accounts
     */
    public AccountsController getAccountsController() {
        return accounts;
    }

    /**
     * Get the instance of DeviceGroupsController.
     * @return deviceGroups
     */
    public DeviceGroupsController getDeviceGroupsController() {
        return deviceGroups;
    }

    /**
     * Get the instance of SMSController.
     * @return sMS
     */
    public SMSController getSMSController() {
        return sMS;
    }

    /**
     * Get the instance of SessionManagementController.
     * @return sessionManagement
     */
    public SessionManagementController getSessionManagementController() {
        return sessionManagement;
    }

    /**
     * Get the instance of ConnectivityCallbacksController.
     * @return connectivityCallbacks
     */
    public ConnectivityCallbacksController getConnectivityCallbacksController() {
        return connectivityCallbacks;
    }

    /**
     * Get the instance of AccountRequestsController.
     * @return accountRequests
     */
    public AccountRequestsController getAccountRequestsController() {
        return accountRequests;
    }

    /**
     * Get the instance of ServicePlansController.
     * @return servicePlans
     */
    public ServicePlansController getServicePlansController() {
        return servicePlans;
    }

    /**
     * Get the instance of DeviceDiagnosticsController.
     * @return deviceDiagnostics
     */
    public DeviceDiagnosticsController getDeviceDiagnosticsController() {
        return deviceDiagnostics;
    }

    /**
     * Get the instance of DeviceProfileManagementController.
     * @return deviceProfileManagement
     */
    public DeviceProfileManagementController getDeviceProfileManagementController() {
        return deviceProfileManagement;
    }

    /**
     * Get the instance of DeviceMonitoringController.
     * @return deviceMonitoring
     */
    public DeviceMonitoringController getDeviceMonitoringController() {
        return deviceMonitoring;
    }

    /**
     * Get the instance of EUICCDeviceProfileManagementController.
     * @return eUICCDeviceProfileManagement
     */
    public EUICCDeviceProfileManagementController getEUICCDeviceProfileManagementController() {
        return eUICCDeviceProfileManagement;
    }

    /**
     * Get the instance of DevicesLocationsController.
     * @return devicesLocations
     */
    public DevicesLocationsController getDevicesLocationsController() {
        return devicesLocations;
    }

    /**
     * Get the instance of ExclusionsController.
     * @return exclusions
     */
    public ExclusionsController getExclusionsController() {
        return exclusions;
    }

    /**
     * Get the instance of DevicesLocationSubscriptionsController.
     * @return devicesLocationSubscriptions
     */
    public DevicesLocationSubscriptionsController getDevicesLocationSubscriptionsController() {
        return devicesLocationSubscriptions;
    }

    /**
     * Get the instance of DeviceLocationCallbacksController.
     * @return deviceLocationCallbacks
     */
    public DeviceLocationCallbacksController getDeviceLocationCallbacksController() {
        return deviceLocationCallbacks;
    }

    /**
     * Get the instance of UsageTriggerManagementController.
     * @return usageTriggerManagement
     */
    public UsageTriggerManagementController getUsageTriggerManagementController() {
        return usageTriggerManagement;
    }

    /**
     * Get the instance of BillingController.
     * @return billing
     */
    public BillingController getBillingController() {
        return billing;
    }

    /**
     * Get the instance of SoftwareManagementSubscriptionsV1Controller.
     * @return softwareManagementSubscriptionsV1
     */
    public SoftwareManagementSubscriptionsV1Controller getSoftwareManagementSubscriptionsV1Controller() {
        return softwareManagementSubscriptionsV1;
    }

    /**
     * Get the instance of SoftwareManagementLicensesV1Controller.
     * @return softwareManagementLicensesV1
     */
    public SoftwareManagementLicensesV1Controller getSoftwareManagementLicensesV1Controller() {
        return softwareManagementLicensesV1;
    }

    /**
     * Get the instance of FirmwareV1Controller.
     * @return firmwareV1
     */
    public FirmwareV1Controller getFirmwareV1Controller() {
        return firmwareV1;
    }

    /**
     * Get the instance of SoftwareManagementCallbacksV1Controller.
     * @return softwareManagementCallbacksV1
     */
    public SoftwareManagementCallbacksV1Controller getSoftwareManagementCallbacksV1Controller() {
        return softwareManagementCallbacksV1;
    }

    /**
     * Get the instance of SoftwareManagementReportsV1Controller.
     * @return softwareManagementReportsV1
     */
    public SoftwareManagementReportsV1Controller getSoftwareManagementReportsV1Controller() {
        return softwareManagementReportsV1;
    }

    /**
     * Get the instance of SoftwareManagementSubscriptionsV2Controller.
     * @return softwareManagementSubscriptionsV2
     */
    public SoftwareManagementSubscriptionsV2Controller getSoftwareManagementSubscriptionsV2Controller() {
        return softwareManagementSubscriptionsV2;
    }

    /**
     * Get the instance of SoftwareManagementLicensesV2Controller.
     * @return softwareManagementLicensesV2
     */
    public SoftwareManagementLicensesV2Controller getSoftwareManagementLicensesV2Controller() {
        return softwareManagementLicensesV2;
    }

    /**
     * Get the instance of CampaignsV2Controller.
     * @return campaignsV2
     */
    public CampaignsV2Controller getCampaignsV2Controller() {
        return campaignsV2;
    }

    /**
     * Get the instance of SoftwareManagementCallbacksV2Controller.
     * @return softwareManagementCallbacksV2
     */
    public SoftwareManagementCallbacksV2Controller getSoftwareManagementCallbacksV2Controller() {
        return softwareManagementCallbacksV2;
    }

    /**
     * Get the instance of SoftwareManagementReportsV2Controller.
     * @return softwareManagementReportsV2
     */
    public SoftwareManagementReportsV2Controller getSoftwareManagementReportsV2Controller() {
        return softwareManagementReportsV2;
    }

    /**
     * Get the instance of ClientLoggingController.
     * @return clientLogging
     */
    public ClientLoggingController getClientLoggingController() {
        return clientLogging;
    }

    /**
     * Get the instance of ServerLoggingController.
     * @return serverLogging
     */
    public ServerLoggingController getServerLoggingController() {
        return serverLogging;
    }

    /**
     * Get the instance of ConfigurationFilesController.
     * @return configurationFiles
     */
    public ConfigurationFilesController getConfigurationFilesController() {
        return configurationFiles;
    }

    /**
     * Get the instance of SoftwareManagementSubscriptionsV3Controller.
     * @return softwareManagementSubscriptionsV3
     */
    public SoftwareManagementSubscriptionsV3Controller getSoftwareManagementSubscriptionsV3Controller() {
        return softwareManagementSubscriptionsV3;
    }

    /**
     * Get the instance of SoftwareManagementLicensesV3Controller.
     * @return softwareManagementLicensesV3
     */
    public SoftwareManagementLicensesV3Controller getSoftwareManagementLicensesV3Controller() {
        return softwareManagementLicensesV3;
    }

    /**
     * Get the instance of CampaignsV3Controller.
     * @return campaignsV3
     */
    public CampaignsV3Controller getCampaignsV3Controller() {
        return campaignsV3;
    }

    /**
     * Get the instance of SoftwareManagementReportsV3Controller.
     * @return softwareManagementReportsV3
     */
    public SoftwareManagementReportsV3Controller getSoftwareManagementReportsV3Controller() {
        return softwareManagementReportsV3;
    }

    /**
     * Get the instance of FirmwareV3Controller.
     * @return firmwareV3
     */
    public FirmwareV3Controller getFirmwareV3Controller() {
        return firmwareV3;
    }

    /**
     * Get the instance of AccountDevicesController.
     * @return accountDevices
     */
    public AccountDevicesController getAccountDevicesController() {
        return accountDevices;
    }

    /**
     * Get the instance of SoftwareManagementCallbacksV3Controller.
     * @return softwareManagementCallbacksV3
     */
    public SoftwareManagementCallbacksV3Controller getSoftwareManagementCallbacksV3Controller() {
        return softwareManagementCallbacksV3;
    }

    /**
     * Get the instance of SIMSecureforIoTLicensesController.
     * @return sIMSecureforIoTLicenses
     */
    public SIMSecureforIoTLicensesController getSIMSecureforIoTLicensesController() {
        return sIMSecureforIoTLicenses;
    }

    /**
     * Get the instance of AccountSubscriptionsController.
     * @return accountSubscriptions
     */
    public AccountSubscriptionsController getAccountSubscriptionsController() {
        return accountSubscriptions;
    }

    /**
     * Get the instance of PerformanceMetricsController.
     * @return performanceMetrics
     */
    public PerformanceMetricsController getPerformanceMetricsController() {
        return performanceMetrics;
    }

    /**
     * Get the instance of DiagnosticsSubscriptionsController.
     * @return diagnosticsSubscriptions
     */
    public DiagnosticsSubscriptionsController getDiagnosticsSubscriptionsController() {
        return diagnosticsSubscriptions;
    }

    /**
     * Get the instance of DiagnosticsObservationsController.
     * @return diagnosticsObservations
     */
    public DiagnosticsObservationsController getDiagnosticsObservationsController() {
        return diagnosticsObservations;
    }

    /**
     * Get the instance of DiagnosticsHistoryController.
     * @return diagnosticsHistory
     */
    public DiagnosticsHistoryController getDiagnosticsHistoryController() {
        return diagnosticsHistory;
    }

    /**
     * Get the instance of DiagnosticsSettingsController.
     * @return diagnosticsSettings
     */
    public DiagnosticsSettingsController getDiagnosticsSettingsController() {
        return diagnosticsSettings;
    }

    /**
     * Get the instance of DiagnosticsCallbacksController.
     * @return diagnosticsCallbacks
     */
    public DiagnosticsCallbacksController getDiagnosticsCallbacksController() {
        return diagnosticsCallbacks;
    }

    /**
     * Get the instance of DiagnosticsFactoryResetController.
     * @return diagnosticsFactoryReset
     */
    public DiagnosticsFactoryResetController getDiagnosticsFactoryResetController() {
        return diagnosticsFactoryReset;
    }

    /**
     * Get the instance of TargetsController.
     * @return targets
     */
    public TargetsController getTargetsController() {
        return targets;
    }

    /**
     * Get the instance of CloudConnectorSubscriptionsController.
     * @return cloudConnectorSubscriptions
     */
    public CloudConnectorSubscriptionsController getCloudConnectorSubscriptionsController() {
        return cloudConnectorSubscriptions;
    }

    /**
     * Get the instance of CloudConnectorDevicesController.
     * @return cloudConnectorDevices
     */
    public CloudConnectorDevicesController getCloudConnectorDevicesController() {
        return cloudConnectorDevices;
    }

    /**
     * Get the instance of DeviceServiceManagementController.
     * @return deviceServiceManagement
     */
    public DeviceServiceManagementController getDeviceServiceManagementController() {
        return deviceServiceManagement;
    }

    /**
     * Get the instance of DeviceReportsController.
     * @return deviceReports
     */
    public DeviceReportsController getDeviceReportsController() {
        return deviceReports;
    }

    /**
     * Get the instance of HyperPreciseLocationCallbacksController.
     * @return hyperPreciseLocationCallbacks
     */
    public HyperPreciseLocationCallbacksController getHyperPreciseLocationCallbacksController() {
        return hyperPreciseLocationCallbacks;
    }

    /**
     * Get the instance of AnomalySettingsController.
     * @return anomalySettings
     */
    public AnomalySettingsController getAnomalySettingsController() {
        return anomalySettings;
    }

    /**
     * Get the instance of AnomalyTriggersController.
     * @return anomalyTriggers
     */
    public AnomalyTriggersController getAnomalyTriggersController() {
        return anomalyTriggers;
    }

    /**
     * Get the instance of AnomalyTriggersV2Controller.
     * @return anomalyTriggersV2
     */
    public AnomalyTriggersV2Controller getAnomalyTriggersV2Controller() {
        return anomalyTriggersV2;
    }

    /**
     * Get the instance of WirelessNetworkPerformanceController.
     * @return wirelessNetworkPerformance
     */
    public WirelessNetworkPerformanceController getWirelessNetworkPerformanceController() {
        return wirelessNetworkPerformance;
    }

    /**
     * Get the instance of FixedWirelessQualificationController.
     * @return fixedWirelessQualification
     */
    public FixedWirelessQualificationController getFixedWirelessQualificationController() {
        return fixedWirelessQualification;
    }

    /**
     * Get the instance of ManagingeSIMProfilesController.
     * @return managingeSIMProfiles
     */
    public ManagingeSIMProfilesController getManagingeSIMProfilesController() {
        return managingeSIMProfiles;
    }

    /**
     * Get the instance of DeviceSMSMessagingController.
     * @return deviceSMSMessaging
     */
    public DeviceSMSMessagingController getDeviceSMSMessagingController() {
        return deviceSMSMessaging;
    }

    /**
     * Get the instance of DeviceActionsController.
     * @return deviceActions
     */
    public DeviceActionsController getDeviceActionsController() {
        return deviceActions;
    }

    /**
     * Get the instance of ThingSpaceQualityofServiceAPIActionsController.
     * @return thingSpaceQualityofServiceAPIActions
     */
    public ThingSpaceQualityofServiceAPIActionsController getThingSpaceQualityofServiceAPIActionsController() {
        return thingSpaceQualityofServiceAPIActions;
    }

    /**
     * Get the instance of PWNController.
     * @return pWN
     */
    public PWNController getPWNController() {
        return pWN;
    }

    /**
     * Get the instance of PromotionPeriodInformationController.
     * @return promotionPeriodInformation
     */
    public PromotionPeriodInformationController getPromotionPeriodInformationController() {
        return promotionPeriodInformation;
    }

    /**
     * Get the instance of RetrievetheTriggersController.
     * @return retrievetheTriggers
     */
    public RetrievetheTriggersController getRetrievetheTriggersController() {
        return retrievetheTriggers;
    }

    /**
     * Get the instance of UpdateTriggersController.
     * @return updateTriggers
     */
    public UpdateTriggersController getUpdateTriggersController() {
        return updateTriggers;
    }

    /**
     * Get the instance of SIMActionsController.
     * @return sIMActions
     */
    public SIMActionsController getSIMActionsController() {
        return sIMActions;
    }

    /**
     * Get the instance of GlobalReportingController.
     * @return globalReporting
     */
    public GlobalReportingController getGlobalReportingController() {
        return globalReporting;
    }

    /**
     * Get the instance of MV2TriggersController.
     * @return mV2Triggers
     */
    public MV2TriggersController getMV2TriggersController() {
        return mV2Triggers;
    }

    /**
     * Get the instance of M5gBIDeviceActionsController.
     * @return m5gBIDeviceActions
     */
    public M5gBIDeviceActionsController getM5gBIDeviceActionsController() {
        return m5gBIDeviceActions;
    }

    /**
     * Get the instance of OauthAuthorizationController.
     * @return oauthAuthorization
     */
    public OauthAuthorizationController getOauthAuthorizationController() {
        return oauthAuthorization;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The credentials to use with ThingspaceOauth.
     * @return thingspaceOauthCredentials
     */
    public ThingspaceOauthCredentials getThingspaceOauthCredentials() {
        return thingspaceOauthManager;
    }

    /**
     * The auth credential model for ThingspaceOauth.
     * @return the instance of ThingspaceOauthModel
     */
    public ThingspaceOauthModel getThingspaceOauthModel() {
        return thingspaceOauthModel;
    }
    /**
     * The credentials to use with VZM2MToken.
     * @return vZM2mTokenCredentials
     */
    public VZM2mTokenCredentials getVZM2mTokenCredentials() {
        return vZM2mTokenManager;
    }

    /**
     * The auth credential model for VZM2MToken.
     * @return the instance of VZM2mTokenModel
     */
    public VZM2mTokenModel getVZM2mTokenModel() {
        return vZM2mTokenModel;
    }
    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.EDGE_DISCOVERY);
    }


    /**
     * Get base URI by current environment.
     * 
     * @param server string for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(String server) {
        return getBaseUri(Server.fromString(server));
    }


    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.EDGE_DISCOVERY)) {
                return "https://5gedge.verizon.com/api/mec/eds";
            }
            if (server.equals(Server.THINGSPACE)) {
                return "https://thingspace.verizon.com/api";
            }
            if (server.equals(Server.OAUTH_SERVER)) {
                return "https://thingspace.verizon.com/api/ts/v1";
            }
            if (server.equals(Server.M2M)) {
                return "https://thingspace.verizon.com/api/m2m";
            }
            if (server.equals(Server.DEVICE_LOCATION)) {
                return "https://thingspace.verizon.com/api/loc/v1";
            }
            if (server.equals(Server.SUBSCRIPTION_SERVER)) {
                return "https://thingspace.verizon.com/api/subsc/v1";
            }
            if (server.equals(Server.SOFTWARE_MANAGEMENT_V1)) {
                return "https://thingspace.verizon.com/api/fota/v1";
            }
            if (server.equals(Server.SOFTWARE_MANAGEMENT_V2)) {
                return "https://thingspace.verizon.com/api/fota/v2";
            }
            if (server.equals(Server.SOFTWARE_MANAGEMENT_V3)) {
                return "https://thingspace.verizon.com/api/fota/v3";
            }
            if (server.equals(Server.PERFORMANCE)) {
                return "https://5gedge.verizon.com/api/mec";
            }
            if (server.equals(Server.DEVICE_DIAGNOSTICS)) {
                return "https://thingspace.verizon.com/api/diagnostics/v1";
            }
            if (server.equals(Server.CLOUD_CONNECTOR)) {
                return "https://thingspace.verizon.com/api/cc/v1";
            }
            if (server.equals(Server.HYPER_PRECISE_LOCATION)) {
                return "https://thingspace.verizon.com/api/hyper-precise/v1";
            }
            if (server.equals(Server.SERVICES)) {
                return "https://5gedge.verizon.com/api/mec/services";
            }
            if (server.equals(Server.QUALITY_OF_SERVICE)) {
                return "https://thingspace.verizon.com/api/m2m/v1/devices";
            }
        }
        if (environment.equals(Environment.MOCK_SERVER_FOR_LIMITED_AVAILABILITY_SEE_QUICK_START)) {
            if (server.equals(Server.EDGE_DISCOVERY)) {
                return "https://mock.thingspace.verizon.com/api/mec/eds";
            }
            if (server.equals(Server.THINGSPACE)) {
                return "https://mock.thingspace.verizon.com/api";
            }
            if (server.equals(Server.OAUTH_SERVER)) {
                return "https://mock.thingspace.verizon.com/api/ts/v1";
            }
            if (server.equals(Server.M2M)) {
                return "https://mock.thingspace.verizon.com/api/m2m";
            }
            if (server.equals(Server.DEVICE_LOCATION)) {
                return "https://mock.thingspace.verizon.com/api/loc/v1";
            }
            if (server.equals(Server.SUBSCRIPTION_SERVER)) {
                return "https://mock.thingspace.verizon.com/api/subsc/v1";
            }
            if (server.equals(Server.SOFTWARE_MANAGEMENT_V1)) {
                return "https://mock.thingspace.verizon.com/api/fota/v1";
            }
            if (server.equals(Server.SOFTWARE_MANAGEMENT_V2)) {
                return "https://mock.thingspace.verizon.com/api/fota/v2";
            }
            if (server.equals(Server.SOFTWARE_MANAGEMENT_V3)) {
                return "https://mock.thingspace.verizon.com/api/fota/v3";
            }
            if (server.equals(Server.PERFORMANCE)) {
                return "https://mock.thingspace.verizon.com/api/mec";
            }
            if (server.equals(Server.DEVICE_DIAGNOSTICS)) {
                return "https://mock.thingspace.verizon.com/api/diagnostics/v1";
            }
            if (server.equals(Server.CLOUD_CONNECTOR)) {
                return "https://mock.thingspace.verizon.com/api/cc/v1";
            }
            if (server.equals(Server.HYPER_PRECISE_LOCATION)) {
                return "https://mock.thingspace.verizon.com/api/hyper-precise/v1";
            }
            if (server.equals(Server.SERVICES)) {
                return "https://mock.thingspace.verizon.com/api/mec/services";
            }
            if (server.equals(Server.QUALITY_OF_SERVICE)) {
                return "https://mock.thingspace.verizon.com/api/m2m/v1/devices";
            }
        }
        return "https://5gedge.verizon.com/api/mec/eds";
    }

    /**
     * Converts this VerizonClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "VerizonClient [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + ", authentications=" + authentications + "]";
    }

    /**
     * Builds a new {@link VerizonClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link VerizonClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.thingspaceOauthCredentials(getThingspaceOauthModel()
                .toBuilder().build());
        builder.vZM2mTokenCredentials(getVZM2mTokenModel()
                .toBuilder().build());
        builder.httpCallback = httpCallback;
        builder.httpClientConfig(() -> ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link VerizonClient}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private HttpClient httpClient;
        private ThingspaceOauthModel thingspaceOauthModel =
                new ThingspaceOauthModel.Builder("", "").build();
        private VZM2mTokenModel vZM2mTokenModel = new VZM2mTokenModel.Builder("").build();
        private HttpCallback httpCallback = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Credentials setter for ThingspaceOauthCredentials.
         * @param thingspaceOauthModel The instance of ThingspaceOauthModel.
         * @return The current instance of builder.
         */
        public Builder thingspaceOauthCredentials(ThingspaceOauthModel thingspaceOauthModel) {
            this.thingspaceOauthModel = thingspaceOauthModel;
            return this;
        }

        /**
         * Credentials setter for VZM2MTokenCredentials.
         * @param vZM2mTokenModel The instance of VZM2mTokenModel.
         * @return The current instance of builder.
         */
        public Builder vZM2mTokenCredentials(VZM2mTokenModel vZM2mTokenModel) {
            this.vZM2mTokenModel = vZM2mTokenModel;
            return this;
        }

        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * HttpCallback.
         * @param httpCallback Callback to be called before and after the HTTP call.
         * @return Builder
         */
        public Builder httpCallback(HttpCallback httpCallback) {
            this.httpCallback = httpCallback;
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Private Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param supplier Supplier for the builder of httpClientConfiguration.
         * @return Builder
         */
        private Builder httpClientConfig(Supplier<HttpClientConfiguration.Builder> supplier) {
            httpClientConfigBuilder = supplier.get();
            return this;
        }

        /**
         * Builds a new VerizonClient object using the set fields.
         * @return VerizonClient
         */
        public VerizonClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig.getConfiguration(), compatibilityFactory);

            return new VerizonClient(environment, httpClient, httpClientConfig,
                    thingspaceOauthModel, vZM2mTokenModel, httpCallback);
        }
    }
}