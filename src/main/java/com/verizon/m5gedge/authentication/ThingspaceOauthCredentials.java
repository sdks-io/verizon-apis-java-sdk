/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.authentication;

import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.models.OauthScopeThingspaceOauthEnum;
import com.verizon.m5gedge.models.OauthToken;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * Interface for Client Credentials OAuth 2.
 */
public interface ThingspaceOauthCredentials {
    /**
     * String value for oauthClientId.
     * @return oauthClientId
     */
    String getOauthClientId();

    /**
     * String value for oauthClientSecret.
     * @return oauthClientSecret
     */
    String getOauthClientSecret();

    /**
     * OauthToken value for oauthToken.
     * @return oauthToken
     */
    OauthToken getOauthToken();

    /**
     * List of OauthScopeThingspaceOauthEnum value for oauthScopes.
     * @return oauthScopes
     */
    List<OauthScopeThingspaceOauthEnum> getOauthScopes();

    /**
     * Checks if provided credentials matched with existing ones.
     * @param oauthClientId String value for credentials.
     * @param oauthClientSecret String value for credentials.
     * @param oauthToken OauthToken value for credentials.
     * @param oauthScopes List of OauthScopeThingspaceOauthEnum value for credentials.
     * @return true if credentials matched.
     */
    boolean equals(String oauthClientId, String oauthClientSecret, OauthToken oauthToken,
            List<OauthScopeThingspaceOauthEnum> oauthScopes);

    /**
     * Fetch the OAuth token asynchronously.
     * @param additionalParameters Additional parameters to send during authorization.
     */
    CompletableFuture<OauthToken> fetchTokenAsync(final Map<String, Object> additionalParameters);

    /**
     * Fetch the OAuth token asynchronously.
     */
    CompletableFuture<OauthToken> fetchTokenAsync();

    /**
     * Fetch the OAuth token.
     * @param additionalParameters Additional parameters to send during authorization.
     */
    OauthToken fetchToken(Map<String, Object> additionalParameters) throws ApiException, IOException;

    /**
     * Fetch the OAuth token.
     */
    OauthToken fetchToken() throws ApiException, IOException;

     /**
     * Has the OAuth token expired?.
     * @return True if expired
     */
    boolean isTokenExpired();

}
