/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.IntelligenceResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.AnomalyDetectionTrigger;
import com.verizon.m5gedge.models.AnomalyTriggerResult;
import com.verizon.m5gedge.models.CreateTriggerRequestOptions;
import com.verizon.m5gedge.models.IntelligenceSuccessResult;
import com.verizon.m5gedge.models.UpdateTriggerRequestOptions;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AnomalyTriggersV2Controller extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public AnomalyTriggersV2Controller(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Creates the trigger to identify an anomaly.
     * @param  body  Required parameter: Request to create an anomaly trigger.
     * @return    Returns the AnomalyDetectionTrigger wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<AnomalyDetectionTrigger> createAnomalyDetectionTriggerV2(
            final List<CreateTriggerRequestOptions> body) throws ApiException, IOException {
        return prepareCreateAnomalyDetectionTriggerV2Request(body).execute();
    }

    /**
     * Creates the trigger to identify an anomaly.
     * @param  body  Required parameter: Request to create an anomaly trigger.
     * @return    Returns the AnomalyDetectionTrigger wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<AnomalyDetectionTrigger>> createAnomalyDetectionTriggerV2Async(
            final List<CreateTriggerRequestOptions> body) {
        try { 
            return prepareCreateAnomalyDetectionTriggerV2Request(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createAnomalyDetectionTriggerV2.
     */
    private ApiCall<ApiResponse<AnomalyDetectionTrigger>, ApiException> prepareCreateAnomalyDetectionTriggerV2Request(
            final List<CreateTriggerRequestOptions> body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<AnomalyDetectionTrigger>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v2/triggers")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, AnomalyDetectionTrigger.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("An error occurred.",
                                (reason, context) -> new IntelligenceResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves the values for a specific trigger ID.
     * @param  triggerId  Required parameter: The trigger ID of a specific trigger.
     * @return    Returns the AnomalyTriggerResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<AnomalyTriggerResult> listAnomalyDetectionTriggerSettingsV2(
            final String triggerId) throws ApiException, IOException {
        return prepareListAnomalyDetectionTriggerSettingsV2Request(triggerId).execute();
    }

    /**
     * Retrieves the values for a specific trigger ID.
     * @param  triggerId  Required parameter: The trigger ID of a specific trigger.
     * @return    Returns the AnomalyTriggerResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<AnomalyTriggerResult>> listAnomalyDetectionTriggerSettingsV2Async(
            final String triggerId) {
        try { 
            return prepareListAnomalyDetectionTriggerSettingsV2Request(triggerId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listAnomalyDetectionTriggerSettingsV2.
     */
    private ApiCall<ApiResponse<AnomalyTriggerResult>, ApiException> prepareListAnomalyDetectionTriggerSettingsV2Request(
            final String triggerId) throws IOException {
        return new ApiCall.Builder<ApiResponse<AnomalyTriggerResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v2/triggers/{triggerId}")
                        .templateParam(param -> param.key("triggerId").value(triggerId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, AnomalyTriggerResult.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("An error occurred.",
                                (reason, context) -> new IntelligenceResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates an existing trigger using the account name.
     * @param  body  Required parameter: Request to update existing trigger.
     * @return    Returns the IntelligenceSuccessResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<IntelligenceSuccessResult> updateAnomalyDetectionTriggerV2(
            final List<UpdateTriggerRequestOptions> body) throws ApiException, IOException {
        return prepareUpdateAnomalyDetectionTriggerV2Request(body).execute();
    }

    /**
     * Updates an existing trigger using the account name.
     * @param  body  Required parameter: Request to update existing trigger.
     * @return    Returns the IntelligenceSuccessResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<IntelligenceSuccessResult>> updateAnomalyDetectionTriggerV2Async(
            final List<UpdateTriggerRequestOptions> body) {
        try { 
            return prepareUpdateAnomalyDetectionTriggerV2Request(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateAnomalyDetectionTriggerV2.
     */
    private ApiCall<ApiResponse<IntelligenceSuccessResult>, ApiException> prepareUpdateAnomalyDetectionTriggerV2Request(
            final List<UpdateTriggerRequestOptions> body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<IntelligenceSuccessResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v2/triggers")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, IntelligenceSuccessResult.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("An error occurred.",
                                (reason, context) -> new IntelligenceResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}