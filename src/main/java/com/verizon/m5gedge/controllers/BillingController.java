/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.DeviceLocationResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.ManagedAccountCancelRequest;
import com.verizon.m5gedge.models.ManagedAccountCancelResponse;
import com.verizon.m5gedge.models.ManagedAccountsAddRequest;
import com.verizon.m5gedge.models.ManagedAccountsAddResponse;
import com.verizon.m5gedge.models.ManagedAccountsGetAllResponse;
import com.verizon.m5gedge.models.ManagedAccountsProvisionRequest;
import com.verizon.m5gedge.models.ManagedAccountsProvisionResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class BillingController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public BillingController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This endpoint allows user to add managed accounts to a primary account.
     * @param  body  Required parameter: Service name and list of accounts to add
     * @return    Returns the ManagedAccountsAddResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ManagedAccountsAddResponse> addAccount(
            final ManagedAccountsAddRequest body) throws ApiException, IOException {
        return prepareAddAccountRequest(body).execute();
    }

    /**
     * This endpoint allows user to add managed accounts to a primary account.
     * @param  body  Required parameter: Service name and list of accounts to add
     * @return    Returns the ManagedAccountsAddResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ManagedAccountsAddResponse>> addAccountAsync(
            final ManagedAccountsAddRequest body) {
        try { 
            return prepareAddAccountRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addAccount.
     */
    private ApiCall<ApiResponse<ManagedAccountsAddResponse>, ApiException> prepareAddAccountRequest(
            final ManagedAccountsAddRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<ManagedAccountsAddResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SUBSCRIPTION_SERVER.value())
                        .path("/managedaccounts/actions/add")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ManagedAccountsAddResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Activates a managed billing service relationship between a managed account and the primary
     * account.
     * @param  body  Required parameter: Service name and list of accounts to add
     * @return    Returns the ManagedAccountsProvisionResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ManagedAccountsProvisionResponse> managedAccountAction(
            final ManagedAccountsProvisionRequest body) throws ApiException, IOException {
        return prepareManagedAccountActionRequest(body).execute();
    }

    /**
     * Activates a managed billing service relationship between a managed account and the primary
     * account.
     * @param  body  Required parameter: Service name and list of accounts to add
     * @return    Returns the ManagedAccountsProvisionResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ManagedAccountsProvisionResponse>> managedAccountActionAsync(
            final ManagedAccountsProvisionRequest body) {
        try { 
            return prepareManagedAccountActionRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for managedAccountAction.
     */
    private ApiCall<ApiResponse<ManagedAccountsProvisionResponse>, ApiException> prepareManagedAccountActionRequest(
            final ManagedAccountsProvisionRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<ManagedAccountsProvisionResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SUBSCRIPTION_SERVER.value())
                        .path("/managedaccounts/actions/provision")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ManagedAccountsProvisionResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deactivates a managed billing service relationship between a managed account and the primary
     * account.
     * @param  body  Required parameter: Service name and list of accounts to add
     * @return    Returns the ManagedAccountCancelResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ManagedAccountCancelResponse> cancelManagedAccountAction(
            final ManagedAccountCancelRequest body) throws ApiException, IOException {
        return prepareCancelManagedAccountActionRequest(body).execute();
    }

    /**
     * Deactivates a managed billing service relationship between a managed account and the primary
     * account.
     * @param  body  Required parameter: Service name and list of accounts to add
     * @return    Returns the ManagedAccountCancelResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ManagedAccountCancelResponse>> cancelManagedAccountActionAsync(
            final ManagedAccountCancelRequest body) {
        try { 
            return prepareCancelManagedAccountActionRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for cancelManagedAccountAction.
     */
    private ApiCall<ApiResponse<ManagedAccountCancelResponse>, ApiException> prepareCancelManagedAccountActionRequest(
            final ManagedAccountCancelRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<ManagedAccountCancelResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SUBSCRIPTION_SERVER.value())
                        .path("/managedaccounts/actions/cancel")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ManagedAccountCancelResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint allows user to retrieve the list of all accounts managed by a primary account.
     * @param  accountName  Required parameter: Primary account identifier
     * @param  serviceName  Required parameter: Service name
     * @return    Returns the ManagedAccountsGetAllResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ManagedAccountsGetAllResponse> listManagedAccount(
            final String accountName,
            final String serviceName) throws ApiException, IOException {
        return prepareListManagedAccountRequest(accountName, serviceName).execute();
    }

    /**
     * This endpoint allows user to retrieve the list of all accounts managed by a primary account.
     * @param  accountName  Required parameter: Primary account identifier
     * @param  serviceName  Required parameter: Service name
     * @return    Returns the ManagedAccountsGetAllResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ManagedAccountsGetAllResponse>> listManagedAccountAsync(
            final String accountName,
            final String serviceName) {
        try { 
            return prepareListManagedAccountRequest(accountName, serviceName).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listManagedAccount.
     */
    private ApiCall<ApiResponse<ManagedAccountsGetAllResponse>, ApiException> prepareListManagedAccountRequest(
            final String accountName,
            final String serviceName) throws IOException {
        return new ApiCall.Builder<ApiResponse<ManagedAccountsGetAllResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SUBSCRIPTION_SERVER.value())
                        .path("/managedaccounts/{accountName}/service/{serviceName}")
                        .templateParam(param -> param.key("accountName").value(accountName)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("serviceName").value(serviceName)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ManagedAccountsGetAllResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}