/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.ChangeConfigurationRequest;
import com.verizon.m5gedge.models.ChangeConfigurationResponse;
import com.verizon.m5gedge.models.FindDeviceByPropertyResponseList;
import com.verizon.m5gedge.models.QuerySubscriptionRequest;
import com.verizon.m5gedge.models.RemoveDeviceRequest;
import com.verizon.m5gedge.models.SearchDeviceByPropertyResponseList;
import com.verizon.m5gedge.models.SearchDeviceEventHistoryRequest;
import com.verizon.m5gedge.models.SearchDeviceEventHistoryResponseList;
import com.verizon.m5gedge.models.SearchSensorHistoryRequest;
import com.verizon.m5gedge.models.SearchSensorHistoryResponseList;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class CloudConnectorDevicesController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public CloudConnectorDevicesController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Change configuration values on a device, such as setting how often a device records and
     * reports sensor readings.
     * @param  body  Required parameter: The request body changes configuration values on a device.
     * @return    Returns the ChangeConfigurationResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ChangeConfigurationResponse> updateDevicesConfigurationValue(
            final ChangeConfigurationRequest body) throws ApiException, IOException {
        return prepareUpdateDevicesConfigurationValueRequest(body).execute();
    }

    /**
     * Change configuration values on a device, such as setting how often a device records and
     * reports sensor readings.
     * @param  body  Required parameter: The request body changes configuration values on a device.
     * @return    Returns the ChangeConfigurationResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ChangeConfigurationResponse>> updateDevicesConfigurationValueAsync(
            final ChangeConfigurationRequest body) {
        try { 
            return prepareUpdateDevicesConfigurationValueRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDevicesConfigurationValue.
     */
    private ApiCall<ApiResponse<ChangeConfigurationResponse>, ApiException> prepareUpdateDevicesConfigurationValueRequest(
            final ChangeConfigurationRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<ChangeConfigurationResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.CLOUD_CONNECTOR.value())
                        .path("/devices/configuration/actions/set")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ChangeConfigurationResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Find devices by property values. Returns an array of all matching device resources.
     * @param  body  Required parameter: The request body specifies fields and values to match.
     * @return    Returns the FindDeviceByPropertyResponseList wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<FindDeviceByPropertyResponseList> findDeviceByPropertyValues(
            final QuerySubscriptionRequest body) throws ApiException, IOException {
        return prepareFindDeviceByPropertyValuesRequest(body).execute();
    }

    /**
     * Find devices by property values. Returns an array of all matching device resources.
     * @param  body  Required parameter: The request body specifies fields and values to match.
     * @return    Returns the FindDeviceByPropertyResponseList wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<FindDeviceByPropertyResponseList>> findDeviceByPropertyValuesAsync(
            final QuerySubscriptionRequest body) {
        try { 
            return prepareFindDeviceByPropertyValuesRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for findDeviceByPropertyValues.
     */
    private ApiCall<ApiResponse<FindDeviceByPropertyResponseList>, ApiException> prepareFindDeviceByPropertyValuesRequest(
            final QuerySubscriptionRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<FindDeviceByPropertyResponseList>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.CLOUD_CONNECTOR.value())
                        .path("/devices/actions/query")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, FindDeviceByPropertyResponseList.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Search for devices by property values. Returns an array of all matching device resources.
     * @param  body  Required parameter: The request body specifies fields and values to match.
     * @return    Returns the SearchDeviceByPropertyResponseList wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<SearchDeviceByPropertyResponseList> searchDevicesResourcesByPropertyValues(
            final QuerySubscriptionRequest body) throws ApiException, IOException {
        return prepareSearchDevicesResourcesByPropertyValuesRequest(body).execute();
    }

    /**
     * Search for devices by property values. Returns an array of all matching device resources.
     * @param  body  Required parameter: The request body specifies fields and values to match.
     * @return    Returns the SearchDeviceByPropertyResponseList wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<SearchDeviceByPropertyResponseList>> searchDevicesResourcesByPropertyValuesAsync(
            final QuerySubscriptionRequest body) {
        try { 
            return prepareSearchDevicesResourcesByPropertyValuesRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for searchDevicesResourcesByPropertyValues.
     */
    private ApiCall<ApiResponse<SearchDeviceByPropertyResponseList>, ApiException> prepareSearchDevicesResourcesByPropertyValuesRequest(
            final QuerySubscriptionRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<SearchDeviceByPropertyResponseList>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.CLOUD_CONNECTOR.value())
                        .path("/devices/actions/search")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, SearchDeviceByPropertyResponseList.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Search device event history to find events that match criteria.Sensor readings, configuration
     * changes, and other device data are all stored as events.
     * @param  body  Required parameter: The device identifier and fields to match in the search.
     * @return    Returns the SearchDeviceEventHistoryResponseList wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<SearchDeviceEventHistoryResponseList> searchDeviceEventHistory(
            final SearchDeviceEventHistoryRequest body) throws ApiException, IOException {
        return prepareSearchDeviceEventHistoryRequest(body).execute();
    }

    /**
     * Search device event history to find events that match criteria.Sensor readings, configuration
     * changes, and other device data are all stored as events.
     * @param  body  Required parameter: The device identifier and fields to match in the search.
     * @return    Returns the SearchDeviceEventHistoryResponseList wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<SearchDeviceEventHistoryResponseList>> searchDeviceEventHistoryAsync(
            final SearchDeviceEventHistoryRequest body) {
        try { 
            return prepareSearchDeviceEventHistoryRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for searchDeviceEventHistory.
     */
    private ApiCall<ApiResponse<SearchDeviceEventHistoryResponseList>, ApiException> prepareSearchDeviceEventHistoryRequest(
            final SearchDeviceEventHistoryRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<SearchDeviceEventHistoryResponseList>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.CLOUD_CONNECTOR.value())
                        .path("/devices/fields/actions/history/search")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, SearchDeviceEventHistoryResponseList.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns the readings of a specified sensor, with the most recent reading first. Sensor
     * readings are stored as events; this request an array of events.
     * @param  fieldname  Required parameter: The name of the sensor.
     * @param  body  Required parameter: The device identifier and fields to match in the search.
     * @return    Returns the SearchSensorHistoryResponseList wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<SearchSensorHistoryResponseList> searchSensorReadings(
            final String fieldname,
            final SearchSensorHistoryRequest body) throws ApiException, IOException {
        return prepareSearchSensorReadingsRequest(fieldname, body).execute();
    }

    /**
     * Returns the readings of a specified sensor, with the most recent reading first. Sensor
     * readings are stored as events; this request an array of events.
     * @param  fieldname  Required parameter: The name of the sensor.
     * @param  body  Required parameter: The device identifier and fields to match in the search.
     * @return    Returns the SearchSensorHistoryResponseList wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<SearchSensorHistoryResponseList>> searchSensorReadingsAsync(
            final String fieldname,
            final SearchSensorHistoryRequest body) {
        try { 
            return prepareSearchSensorReadingsRequest(fieldname, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for searchSensorReadings.
     */
    private ApiCall<ApiResponse<SearchSensorHistoryResponseList>, ApiException> prepareSearchSensorReadingsRequest(
            final String fieldname,
            final SearchSensorHistoryRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<SearchSensorHistoryResponseList>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.CLOUD_CONNECTOR.value())
                        .path("/devices/fields/{fieldname}/actions/history")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("fieldname").value(fieldname)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, SearchSensorHistoryResponseList.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Remove a device from a ThingSpace account.
     * @param  body  Required parameter: The request body identifies the device to delete.
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<Void> deleteDeviceFromAccount(
            final RemoveDeviceRequest body) throws ApiException, IOException {
        return prepareDeleteDeviceFromAccountRequest(body).execute();
    }

    /**
     * Remove a device from a ThingSpace account.
     * @param  body  Required parameter: The request body identifies the device to delete.
     * @return    Returns the Void wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<Void>> deleteDeviceFromAccountAsync(
            final RemoveDeviceRequest body) {
        try { 
            return prepareDeleteDeviceFromAccountRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDeviceFromAccount.
     */
    private ApiCall<ApiResponse<Void>, ApiException> prepareDeleteDeviceFromAccountRequest(
            final RemoveDeviceRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<Void>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.CLOUD_CONNECTOR.value())
                        .path("/devices/actions/delete")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}