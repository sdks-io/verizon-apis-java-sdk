/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.ConnectivityManagementResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.CallbackActionResult;
import com.verizon.m5gedge.models.ConnectivityManagementCallback;
import com.verizon.m5gedge.models.RegisterCallbackRequest;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ConnectivityCallbacksController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ConnectivityCallbacksController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns the name and endpoint URL of the callback listening services registered for a given
     * account.
     * @param  aname  Required parameter: Account name.
     * @return    Returns the List of ConnectivityManagementCallback wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<ConnectivityManagementCallback>> listRegisteredCallbacks(
            final String aname) throws ApiException, IOException {
        return prepareListRegisteredCallbacksRequest(aname).execute();
    }

    /**
     * Returns the name and endpoint URL of the callback listening services registered for a given
     * account.
     * @param  aname  Required parameter: Account name.
     * @return    Returns the List of ConnectivityManagementCallback wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<ConnectivityManagementCallback>>> listRegisteredCallbacksAsync(
            final String aname) {
        try { 
            return prepareListRegisteredCallbacksRequest(aname).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listRegisteredCallbacks.
     */
    private ApiCall<ApiResponse<List<ConnectivityManagementCallback>>, ApiException> prepareListRegisteredCallbacksRequest(
            final String aname) throws IOException {
        return new ApiCall.Builder<ApiResponse<List<ConnectivityManagementCallback>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/callbacks/{aname}")
                        .templateParam(param -> param.key("aname").value(aname)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        ConnectivityManagementCallback[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * You are responsible for creating and running a listening process on your server at that URL.
     * @param  aname  Required parameter: Account name.
     * @param  body  Required parameter: Request to register a callback.
     * @return    Returns the CallbackActionResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<CallbackActionResult> registerCallback(
            final String aname,
            final RegisterCallbackRequest body) throws ApiException, IOException {
        return prepareRegisterCallbackRequest(aname, body).execute();
    }

    /**
     * You are responsible for creating and running a listening process on your server at that URL.
     * @param  aname  Required parameter: Account name.
     * @param  body  Required parameter: Request to register a callback.
     * @return    Returns the CallbackActionResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<CallbackActionResult>> registerCallbackAsync(
            final String aname,
            final RegisterCallbackRequest body) {
        try { 
            return prepareRegisterCallbackRequest(aname, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for registerCallback.
     */
    private ApiCall<ApiResponse<CallbackActionResult>, ApiException> prepareRegisterCallbackRequest(
            final String aname,
            final RegisterCallbackRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<CallbackActionResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/callbacks/{aname}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("aname").value(aname)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, CallbackActionResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Stops ThingSpace from sending callback messages for the specified account and service.
     * @param  aname  Required parameter: Account name.
     * @param  sname  Required parameter: Service name.
     * @return    Returns the CallbackActionResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<CallbackActionResult> deregisterCallback(
            final String aname,
            final String sname) throws ApiException, IOException {
        return prepareDeregisterCallbackRequest(aname, sname).execute();
    }

    /**
     * Stops ThingSpace from sending callback messages for the specified account and service.
     * @param  aname  Required parameter: Account name.
     * @param  sname  Required parameter: Service name.
     * @return    Returns the CallbackActionResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<CallbackActionResult>> deregisterCallbackAsync(
            final String aname,
            final String sname) {
        try { 
            return prepareDeregisterCallbackRequest(aname, sname).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deregisterCallback.
     */
    private ApiCall<ApiResponse<CallbackActionResult>, ApiException> prepareDeregisterCallbackRequest(
            final String aname,
            final String sname) throws IOException {
        return new ApiCall.Builder<ApiResponse<CallbackActionResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/callbacks/{aname}/name/{sname}")
                        .templateParam(param -> param.key("aname").value(aname)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("sname").value(sname)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, CallbackActionResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}