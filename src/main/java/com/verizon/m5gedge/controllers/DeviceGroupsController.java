/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.ConnectivityManagementResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.ConnectivityManagementSuccessResult;
import com.verizon.m5gedge.models.CreateDeviceGroupRequest;
import com.verizon.m5gedge.models.DeviceGroup;
import com.verizon.m5gedge.models.DeviceGroupDevicesData;
import com.verizon.m5gedge.models.DeviceGroupUpdateRequest;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DeviceGroupsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DeviceGroupsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Create a new device group and optionally add devices to the group. Device groups can make it
     * easier to manage similar devices and to get reports on their usage.
     * @param  body  Required parameter: A request to create a new device group.
     * @return    Returns the ConnectivityManagementSuccessResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ConnectivityManagementSuccessResult> createDeviceGroup(
            final CreateDeviceGroupRequest body) throws ApiException, IOException {
        return prepareCreateDeviceGroupRequest(body).execute();
    }

    /**
     * Create a new device group and optionally add devices to the group. Device groups can make it
     * easier to manage similar devices and to get reports on their usage.
     * @param  body  Required parameter: A request to create a new device group.
     * @return    Returns the ConnectivityManagementSuccessResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ConnectivityManagementSuccessResult>> createDeviceGroupAsync(
            final CreateDeviceGroupRequest body) {
        try { 
            return prepareCreateDeviceGroupRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createDeviceGroup.
     */
    private ApiCall<ApiResponse<ConnectivityManagementSuccessResult>, ApiException> prepareCreateDeviceGroupRequest(
            final CreateDeviceGroupRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<ConnectivityManagementSuccessResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/groups")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ConnectivityManagementSuccessResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Make changes to a device group, including changing the name and description, and adding or
     * removing devices.
     * @param  aname  Required parameter: Account name.
     * @param  gname  Required parameter: Group name.
     * @param  body  Required parameter: Request to update device group.
     * @return    Returns the ConnectivityManagementSuccessResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ConnectivityManagementSuccessResult> updateDeviceGroup(
            final String aname,
            final String gname,
            final DeviceGroupUpdateRequest body) throws ApiException, IOException {
        return prepareUpdateDeviceGroupRequest(aname, gname, body).execute();
    }

    /**
     * Make changes to a device group, including changing the name and description, and adding or
     * removing devices.
     * @param  aname  Required parameter: Account name.
     * @param  gname  Required parameter: Group name.
     * @param  body  Required parameter: Request to update device group.
     * @return    Returns the ConnectivityManagementSuccessResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ConnectivityManagementSuccessResult>> updateDeviceGroupAsync(
            final String aname,
            final String gname,
            final DeviceGroupUpdateRequest body) {
        try { 
            return prepareUpdateDeviceGroupRequest(aname, gname, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDeviceGroup.
     */
    private ApiCall<ApiResponse<ConnectivityManagementSuccessResult>, ApiException> prepareUpdateDeviceGroupRequest(
            final String aname,
            final String gname,
            final DeviceGroupUpdateRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<ConnectivityManagementSuccessResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/groups/{aname}/name/{gname}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("aname").value(aname)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("gname").value(gname)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ConnectivityManagementSuccessResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns a list of all device groups in a specified account.
     * @param  aname  Required parameter: Account name.
     * @return    Returns the List of DeviceGroup wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<DeviceGroup>> listDeviceGroups(
            final String aname) throws ApiException, IOException {
        return prepareListDeviceGroupsRequest(aname).execute();
    }

    /**
     * Returns a list of all device groups in a specified account.
     * @param  aname  Required parameter: Account name.
     * @return    Returns the List of DeviceGroup wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<DeviceGroup>>> listDeviceGroupsAsync(
            final String aname) {
        try { 
            return prepareListDeviceGroupsRequest(aname).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDeviceGroups.
     */
    private ApiCall<ApiResponse<List<DeviceGroup>>, ApiException> prepareListDeviceGroupsRequest(
            final String aname) throws IOException {
        return new ApiCall.Builder<ApiResponse<List<DeviceGroup>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/groups/{aname}")
                        .templateParam(param -> param.key("aname").value(aname)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        DeviceGroup[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deletes a device group from the account. Devices in the group are moved to the default device
     * group and are not deleted from the account.
     * @param  aname  Required parameter: Account name.
     * @param  gname  Required parameter: Group name.
     * @return    Returns the ConnectivityManagementSuccessResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ConnectivityManagementSuccessResult> deleteDeviceGroup(
            final String aname,
            final String gname) throws ApiException, IOException {
        return prepareDeleteDeviceGroupRequest(aname, gname).execute();
    }

    /**
     * Deletes a device group from the account. Devices in the group are moved to the default device
     * group and are not deleted from the account.
     * @param  aname  Required parameter: Account name.
     * @param  gname  Required parameter: Group name.
     * @return    Returns the ConnectivityManagementSuccessResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ConnectivityManagementSuccessResult>> deleteDeviceGroupAsync(
            final String aname,
            final String gname) {
        try { 
            return prepareDeleteDeviceGroupRequest(aname, gname).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDeviceGroup.
     */
    private ApiCall<ApiResponse<ConnectivityManagementSuccessResult>, ApiException> prepareDeleteDeviceGroupRequest(
            final String aname,
            final String gname) throws IOException {
        return new ApiCall.Builder<ApiResponse<ConnectivityManagementSuccessResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/groups/{aname}/name/{gname}")
                        .templateParam(param -> param.key("aname").value(aname)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("gname").value(gname)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ConnectivityManagementSuccessResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * When HTTP status is 202, a URL will be returned in the Location header of the form
     * /groups/{aname}/name/{gname}/?next={token}. This URL can be used to request the next set of
     * groups.
     * @param  aname  Required parameter: Account name.
     * @param  gname  Required parameter: Group name.
     * @param  next  Optional parameter: Continue the previous query from the pageUrl pagetoken.
     * @return    Returns the DeviceGroupDevicesData wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceGroupDevicesData> getDeviceGroupInformation(
            final String aname,
            final String gname,
            final Long next) throws ApiException, IOException {
        return prepareGetDeviceGroupInformationRequest(aname, gname, next).execute();
    }

    /**
     * When HTTP status is 202, a URL will be returned in the Location header of the form
     * /groups/{aname}/name/{gname}/?next={token}. This URL can be used to request the next set of
     * groups.
     * @param  aname  Required parameter: Account name.
     * @param  gname  Required parameter: Group name.
     * @param  next  Optional parameter: Continue the previous query from the pageUrl pagetoken.
     * @return    Returns the DeviceGroupDevicesData wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceGroupDevicesData>> getDeviceGroupInformationAsync(
            final String aname,
            final String gname,
            final Long next) {
        try { 
            return prepareGetDeviceGroupInformationRequest(aname, gname, next).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDeviceGroupInformation.
     */
    private ApiCall<ApiResponse<DeviceGroupDevicesData>, ApiException> prepareGetDeviceGroupInformationRequest(
            final String aname,
            final String gname,
            final Long next) throws IOException {
        return new ApiCall.Builder<ApiResponse<DeviceGroupDevicesData>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/groups/{aname}/name/{gname}")
                        .queryParam(param -> param.key("next")
                                .value(next).isRequired(false))
                        .templateParam(param -> param.key("aname").value(aname)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("gname").value(gname)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceGroupDevicesData.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}