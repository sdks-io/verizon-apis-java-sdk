/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.DeviceLocationResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.CallbackRegistrationResult;
import com.verizon.m5gedge.models.CallbackServiceNameEnum;
import com.verizon.m5gedge.models.DeviceLocationCallback;
import com.verizon.m5gedge.models.DeviceLocationSuccessResult;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DeviceLocationCallbacksController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DeviceLocationCallbacksController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns a list of all registered callback URLs for the account.
     * @param  account  Required parameter: Account number.
     * @return    Returns the List of DeviceLocationCallback wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<DeviceLocationCallback>> listRegisteredCallbacks(
            final String account) throws ApiException, IOException {
        return prepareListRegisteredCallbacksRequest(account).execute();
    }

    /**
     * Returns a list of all registered callback URLs for the account.
     * @param  account  Required parameter: Account number.
     * @return    Returns the List of DeviceLocationCallback wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<DeviceLocationCallback>>> listRegisteredCallbacksAsync(
            final String account) {
        try { 
            return prepareListRegisteredCallbacksRequest(account).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listRegisteredCallbacks.
     */
    private ApiCall<ApiResponse<List<DeviceLocationCallback>>, ApiException> prepareListRegisteredCallbacksRequest(
            final String account) throws IOException {
        return new ApiCall.Builder<ApiResponse<List<DeviceLocationCallback>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_LOCATION.value())
                        .path("/callbacks/{account}")
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        DeviceLocationCallback[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Provide a URL to receive messages from a ThingSpace callback service.
     * @param  account  Required parameter: Account number.
     * @param  body  Required parameter: Request to register a callback.
     * @return    Returns the CallbackRegistrationResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<CallbackRegistrationResult> registerCallback(
            final String account,
            final DeviceLocationCallback body) throws ApiException, IOException {
        return prepareRegisterCallbackRequest(account, body).execute();
    }

    /**
     * Provide a URL to receive messages from a ThingSpace callback service.
     * @param  account  Required parameter: Account number.
     * @param  body  Required parameter: Request to register a callback.
     * @return    Returns the CallbackRegistrationResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<CallbackRegistrationResult>> registerCallbackAsync(
            final String account,
            final DeviceLocationCallback body) {
        try { 
            return prepareRegisterCallbackRequest(account, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for registerCallback.
     */
    private ApiCall<ApiResponse<CallbackRegistrationResult>, ApiException> prepareRegisterCallbackRequest(
            final String account,
            final DeviceLocationCallback body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<CallbackRegistrationResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_LOCATION.value())
                        .path("/callbacks/{account}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("*/*").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, CallbackRegistrationResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deregister a URL to stop receiving callback messages.
     * @param  account  Required parameter: Account number.
     * @param  service  Required parameter: Callback service name.
     * @return    Returns the DeviceLocationSuccessResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceLocationSuccessResult> deregisterCallback(
            final String account,
            final CallbackServiceNameEnum service) throws ApiException, IOException {
        return prepareDeregisterCallbackRequest(account, service).execute();
    }

    /**
     * Deregister a URL to stop receiving callback messages.
     * @param  account  Required parameter: Account number.
     * @param  service  Required parameter: Callback service name.
     * @return    Returns the DeviceLocationSuccessResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceLocationSuccessResult>> deregisterCallbackAsync(
            final String account,
            final CallbackServiceNameEnum service) {
        try { 
            return prepareDeregisterCallbackRequest(account, service).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deregisterCallback.
     */
    private ApiCall<ApiResponse<DeviceLocationSuccessResult>, ApiException> prepareDeregisterCallbackRequest(
            final String account,
            final CallbackServiceNameEnum service) throws IOException {
        return new ApiCall.Builder<ApiResponse<DeviceLocationSuccessResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_LOCATION.value())
                        .path("/callbacks/{account}/name/{service}")
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("service").value((service != null) ? service.value() : null)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceLocationSuccessResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}