/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.ConnectivityManagementResultException;
import com.verizon.m5gedge.exceptions.RestErrorResponseException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.AccountDeviceListRequest;
import com.verizon.m5gedge.models.AccountDeviceListResult;
import com.verizon.m5gedge.models.AddDevicesRequest;
import com.verizon.m5gedge.models.AddDevicesResult;
import com.verizon.m5gedge.models.AssociateLabelRequest;
import com.verizon.m5gedge.models.BilledusageListRequest;
import com.verizon.m5gedge.models.CarrierActionsRequest;
import com.verizon.m5gedge.models.CarrierActivateRequest;
import com.verizon.m5gedge.models.CarrierDeactivateRequest;
import com.verizon.m5gedge.models.ChangeDeviceIdRequest;
import com.verizon.m5gedge.models.CheckOrderStatusRequest;
import com.verizon.m5gedge.models.ConnectionHistoryResult;
import com.verizon.m5gedge.models.ContactInfoUpdateRequest;
import com.verizon.m5gedge.models.CustomFieldsUpdateRequest;
import com.verizon.m5gedge.models.DeleteDevicesRequest;
import com.verizon.m5gedge.models.DeleteDevicesResult;
import com.verizon.m5gedge.models.DeviceActivationRequest;
import com.verizon.m5gedge.models.DeviceAggregateUsageListRequest;
import com.verizon.m5gedge.models.DeviceConnectionListRequest;
import com.verizon.m5gedge.models.DeviceCostCenterRequest;
import com.verizon.m5gedge.models.DeviceExtendedDiagnosticsRequest;
import com.verizon.m5gedge.models.DeviceExtendedDiagnosticsResult;
import com.verizon.m5gedge.models.DeviceManagementResult;
import com.verizon.m5gedge.models.DeviceMismatchListRequest;
import com.verizon.m5gedge.models.DeviceMismatchListResult;
import com.verizon.m5gedge.models.DevicePrlListRequest;
import com.verizon.m5gedge.models.DeviceProvisioningHistoryListRequest;
import com.verizon.m5gedge.models.DeviceProvisioningHistoryListResult;
import com.verizon.m5gedge.models.DeviceSuspensionStatusRequest;
import com.verizon.m5gedge.models.DeviceUploadRequest;
import com.verizon.m5gedge.models.DeviceUsageListRequest;
import com.verizon.m5gedge.models.DeviceUsageListResult;
import com.verizon.m5gedge.models.GoToStateRequest;
import com.verizon.m5gedge.models.LabelsList;
import com.verizon.m5gedge.models.MoveDeviceRequest;
import com.verizon.m5gedge.models.RequestResponse;
import com.verizon.m5gedge.models.ServicePlanUpdateRequest;
import com.verizon.m5gedge.models.UploadsActivatesDeviceRequest;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DeviceManagementController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DeviceManagementController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * If the devices do not already exist in the account, this API resource adds them before
     * activation.
     * @param  body  Required parameter: Request for activating a service on devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> activateServiceForDevices(
            final CarrierActivateRequest body) throws ApiException, IOException {
        return prepareActivateServiceForDevicesRequest(body).execute();
    }

    /**
     * If the devices do not already exist in the account, this API resource adds them before
     * activation.
     * @param  body  Required parameter: Request for activating a service on devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> activateServiceForDevicesAsync(
            final CarrierActivateRequest body) {
        try { 
            return prepareActivateServiceForDevicesRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for activateServiceForDevices.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareActivateServiceForDevicesRequest(
            final CarrierActivateRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/activate")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Use this API if you want to manage some device settings before you are ready to activate
     * service for the devices.
     * @param  body  Required parameter: Devices to add.
     * @return    Returns the List of AddDevicesResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<AddDevicesResult>> addDevices(
            final AddDevicesRequest body) throws ApiException, IOException {
        return prepareAddDevicesRequest(body).execute();
    }

    /**
     * Use this API if you want to manage some device settings before you are ready to activate
     * service for the devices.
     * @param  body  Required parameter: Devices to add.
     * @return    Returns the List of AddDevicesResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<AddDevicesResult>>> addDevicesAsync(
            final AddDevicesRequest body) {
        try { 
            return prepareAddDevicesRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addDevices.
     */
    private ApiCall<ApiResponse<List<AddDevicesResult>>, ApiException> prepareAddDevicesRequest(
            final AddDevicesRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<List<AddDevicesResult>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/add")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        AddDevicesResult[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Sends a CarrierService callback message for each device in the request when the contact
     * information has been changed, or if there was a problem and the change could not be
     * completed.
     * @param  body  Required parameter: Request to update contact information for devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> updateDevicesContactInformation(
            final ContactInfoUpdateRequest body) throws ApiException, IOException {
        return prepareUpdateDevicesContactInformationRequest(body).execute();
    }

    /**
     * Sends a CarrierService callback message for each device in the request when the contact
     * information has been changed, or if there was a problem and the change could not be
     * completed.
     * @param  body  Required parameter: Request to update contact information for devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> updateDevicesContactInformationAsync(
            final ContactInfoUpdateRequest body) {
        try { 
            return prepareUpdateDevicesContactInformationRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDevicesContactInformation.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareUpdateDevicesContactInformationRequest(
            final ContactInfoUpdateRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/contactInfo")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Sends a CarrierService callback message for each device in the request when the custom fields
     * have been changed, or if there was a problem and the change could not be completed.
     * @param  body  Required parameter: Request to update custom field of devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> updateDevicesCustomFields(
            final CustomFieldsUpdateRequest body) throws ApiException, IOException {
        return prepareUpdateDevicesCustomFieldsRequest(body).execute();
    }

    /**
     * Sends a CarrierService callback message for each device in the request when the custom fields
     * have been changed, or if there was a problem and the change could not be completed.
     * @param  body  Required parameter: Request to update custom field of devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> updateDevicesCustomFieldsAsync(
            final CustomFieldsUpdateRequest body) {
        try { 
            return prepareUpdateDevicesCustomFieldsRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDevicesCustomFields.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareUpdateDevicesCustomFieldsRequest(
            final CustomFieldsUpdateRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/customFields")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deactivating service for a device may result in an early termination fee (ETF) being charged
     * to the account, depending on the terms of the contract with Verizon. If your contract allows
     * ETF waivers and if you want to use one for a particular deactivation, set the etfWaiver value
     * to True.
     * @param  body  Required parameter: Request to deactivate service for one or more devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> deactivateServiceForDevices(
            final CarrierDeactivateRequest body) throws ApiException, IOException {
        return prepareDeactivateServiceForDevicesRequest(body).execute();
    }

    /**
     * Deactivating service for a device may result in an early termination fee (ETF) being charged
     * to the account, depending on the terms of the contract with Verizon. If your contract allows
     * ETF waivers and if you want to use one for a particular deactivation, set the etfWaiver value
     * to True.
     * @param  body  Required parameter: Request to deactivate service for one or more devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> deactivateServiceForDevicesAsync(
            final CarrierDeactivateRequest body) {
        try { 
            return prepareDeactivateServiceForDevicesRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deactivateServiceForDevices.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareDeactivateServiceForDevicesRequest(
            final CarrierDeactivateRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/deactivate")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Use this API to remove unneeded devices from an account.
     * @param  body  Required parameter: Devices to delete.
     * @return    Returns the List of DeleteDevicesResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<DeleteDevicesResult>> deleteDeactivatedDevices(
            final DeleteDevicesRequest body) throws ApiException, IOException {
        return prepareDeleteDeactivatedDevicesRequest(body).execute();
    }

    /**
     * Use this API to remove unneeded devices from an account.
     * @param  body  Required parameter: Devices to delete.
     * @return    Returns the List of DeleteDevicesResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<DeleteDevicesResult>>> deleteDeactivatedDevicesAsync(
            final DeleteDevicesRequest body) {
        try { 
            return prepareDeleteDeactivatedDevicesRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteDeactivatedDevices.
     */
    private ApiCall<ApiResponse<List<DeleteDevicesResult>>, ApiException> prepareDeleteDeactivatedDevicesRequest(
            final DeleteDevicesRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<List<DeleteDevicesResult>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/delete")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        DeleteDevicesResult[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns information about a single device or information about all devices that match the
     * given parameters. Returned information includes device provisioning state, service plan, MDN,
     * MIN, and IP address.
     * @param  body  Required parameter: Device information query.
     * @return    Returns the AccountDeviceListResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<AccountDeviceListResult> listDevicesInformation(
            final AccountDeviceListRequest body) throws ApiException, IOException {
        return prepareListDevicesInformationRequest(body).execute();
    }

    /**
     * Returns information about a single device or information about all devices that match the
     * given parameters. Returned information includes device provisioning state, service plan, MDN,
     * MIN, and IP address.
     * @param  body  Required parameter: Device information query.
     * @return    Returns the AccountDeviceListResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<AccountDeviceListResult>> listDevicesInformationAsync(
            final AccountDeviceListRequest body) {
        try { 
            return prepareListDevicesInformationRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDevicesInformation.
     */
    private ApiCall<ApiResponse<AccountDeviceListResult>, ApiException> prepareListDevicesInformationRequest(
            final AccountDeviceListRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<AccountDeviceListResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/list")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, AccountDeviceListResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns a list of all 4G devices with an ICCID (SIM) that was not activated with the expected
     * IMEI (hardware) during a specified time frame.
     * @param  body  Required parameter: Request to list devices with mismatched IMEIs and ICCIDs.
     * @return    Returns the DeviceMismatchListResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceMismatchListResult> listDevicesWithImeiIccidMismatch(
            final DeviceMismatchListRequest body) throws ApiException, IOException {
        return prepareListDevicesWithImeiIccidMismatchRequest(body).execute();
    }

    /**
     * Returns a list of all 4G devices with an ICCID (SIM) that was not activated with the expected
     * IMEI (hardware) during a specified time frame.
     * @param  body  Required parameter: Request to list devices with mismatched IMEIs and ICCIDs.
     * @return    Returns the DeviceMismatchListResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceMismatchListResult>> listDevicesWithImeiIccidMismatchAsync(
            final DeviceMismatchListRequest body) {
        try { 
            return prepareListDevicesWithImeiIccidMismatchRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDevicesWithImeiIccidMismatch.
     */
    private ApiCall<ApiResponse<DeviceMismatchListResult>, ApiException> prepareListDevicesWithImeiIccidMismatchRequest(
            final DeviceMismatchListRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceMismatchListResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/list/imeiiccidmismatch")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceMismatchListResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Move active devices from one billing account to another within a customer profile.
     * @param  body  Required parameter: Request to move devices between accounts.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> moveDevicesWithinAccountsOfProfile(
            final MoveDeviceRequest body) throws ApiException, IOException {
        return prepareMoveDevicesWithinAccountsOfProfileRequest(body).execute();
    }

    /**
     * Move active devices from one billing account to another within a customer profile.
     * @param  body  Required parameter: Request to move devices between accounts.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> moveDevicesWithinAccountsOfProfileAsync(
            final MoveDeviceRequest body) {
        try { 
            return prepareMoveDevicesWithinAccountsOfProfileRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for moveDevicesWithinAccountsOfProfile.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareMoveDevicesWithinAccountsOfProfileRequest(
            final MoveDeviceRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/move")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Changes the provisioning state of one or more devices to a specified customer-defined service
     * and state.
     * @param  body  Required parameter: Request to change device state to one defined by the user.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> updateDevicesState(
            final GoToStateRequest body) throws ApiException, IOException {
        return prepareUpdateDevicesStateRequest(body).execute();
    }

    /**
     * Changes the provisioning state of one or more devices to a specified customer-defined service
     * and state.
     * @param  body  Required parameter: Request to change device state to one defined by the user.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> updateDevicesStateAsync(
            final GoToStateRequest body) {
        try { 
            return prepareUpdateDevicesStateRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDevicesState.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareUpdateDevicesStateRequest(
            final GoToStateRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/gotostate")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Changes the service plan for one or more devices.
     * @param  body  Required parameter: Request to change device service plan.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> changeDevicesServicePlan(
            final ServicePlanUpdateRequest body) throws ApiException, IOException {
        return prepareChangeDevicesServicePlanRequest(body).execute();
    }

    /**
     * Changes the service plan for one or more devices.
     * @param  body  Required parameter: Request to change device service plan.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> changeDevicesServicePlanAsync(
            final ServicePlanUpdateRequest body) {
        try { 
            return prepareChangeDevicesServicePlanRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for changeDevicesServicePlan.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareChangeDevicesServicePlanRequest(
            final ServicePlanUpdateRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/plan")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Suspends service for one or more devices.
     * @param  body  Required parameter: Request to suspend service for one or more devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> suspendServiceForDevices(
            final CarrierActionsRequest body) throws ApiException, IOException {
        return prepareSuspendServiceForDevicesRequest(body).execute();
    }

    /**
     * Suspends service for one or more devices.
     * @param  body  Required parameter: Request to suspend service for one or more devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> suspendServiceForDevicesAsync(
            final CarrierActionsRequest body) {
        try { 
            return prepareSuspendServiceForDevicesRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for suspendServiceForDevices.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareSuspendServiceForDevicesRequest(
            final CarrierActionsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/suspend")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Restores service to one or more suspended devices.
     * @param  body  Required parameter: Request to restore services of one or more suspended
     *         devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> restoreServiceForSuspendedDevices(
            final CarrierActionsRequest body) throws ApiException, IOException {
        return prepareRestoreServiceForSuspendedDevicesRequest(body).execute();
    }

    /**
     * Restores service to one or more suspended devices.
     * @param  body  Required parameter: Request to restore services of one or more suspended
     *         devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> restoreServiceForSuspendedDevicesAsync(
            final CarrierActionsRequest body) {
        try { 
            return prepareRestoreServiceForSuspendedDevicesRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for restoreServiceForSuspendedDevices.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareRestoreServiceForSuspendedDevicesRequest(
            final CarrierActionsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/restore")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Checks whether specified devices are registered by the manufacturer with the Verizon network
     * and are available to be activated.
     * @param  body  Required parameter: Request to check if devices can be activated or not.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> checkDevicesAvailabilityForActivation(
            final DeviceActivationRequest body) throws ApiException, IOException {
        return prepareCheckDevicesAvailabilityForActivationRequest(body).execute();
    }

    /**
     * Checks whether specified devices are registered by the manufacturer with the Verizon network
     * and are available to be activated.
     * @param  body  Required parameter: Request to check if devices can be activated or not.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> checkDevicesAvailabilityForActivationAsync(
            final DeviceActivationRequest body) {
        try { 
            return prepareCheckDevicesAvailabilityForActivationRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for checkDevicesAvailabilityForActivation.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareCheckDevicesAvailabilityForActivationRequest(
            final DeviceActivationRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/availability/actions/list")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Each response includes a maximum of 500 records. To obtain more records, you can call the API
     * multiple times, adjusting the earliest value each time to start where the previous request
     * finished.
     * @param  body  Required parameter: Query to retrieve device connection history.
     * @return    Returns the ConnectionHistoryResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ConnectionHistoryResult> retrieveDeviceConnectionHistory(
            final DeviceConnectionListRequest body) throws ApiException, IOException {
        return prepareRetrieveDeviceConnectionHistoryRequest(body).execute();
    }

    /**
     * Each response includes a maximum of 500 records. To obtain more records, you can call the API
     * multiple times, adjusting the earliest value each time to start where the previous request
     * finished.
     * @param  body  Required parameter: Query to retrieve device connection history.
     * @return    Returns the ConnectionHistoryResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ConnectionHistoryResult>> retrieveDeviceConnectionHistoryAsync(
            final DeviceConnectionListRequest body) {
        try { 
            return prepareRetrieveDeviceConnectionHistoryRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for retrieveDeviceConnectionHistory.
     */
    private ApiCall<ApiResponse<ConnectionHistoryResult>, ApiException> prepareRetrieveDeviceConnectionHistoryRequest(
            final DeviceConnectionListRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<ConnectionHistoryResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/connections/actions/listHistory")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ConnectionHistoryResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Changes or removes the CostCenterCode value or customer name and address (Primary Place of
     * Use) for one or more devices.
     * @param  body  Required parameter: Request to update cost center code value for one or more
     *         devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> updateDevicesCostCenterCode(
            final DeviceCostCenterRequest body) throws ApiException, IOException {
        return prepareUpdateDevicesCostCenterCodeRequest(body).execute();
    }

    /**
     * Changes or removes the CostCenterCode value or customer name and address (Primary Place of
     * Use) for one or more devices.
     * @param  body  Required parameter: Request to update cost center code value for one or more
     *         devices.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> updateDevicesCostCenterCodeAsync(
            final DeviceCostCenterRequest body) {
        try { 
            return prepareUpdateDevicesCostCenterCodeRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDevicesCostCenterCode.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareUpdateDevicesCostCenterCodeRequest(
            final DeviceCostCenterRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/costCenter")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns extended diagnostic information about a specified device, including connectivity,
     * provisioning, billing and location status.
     * @param  body  Required parameter: Request to query extended diagnostics information for a
     *         device.
     * @return    Returns the DeviceExtendedDiagnosticsResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceExtendedDiagnosticsResult> getDeviceExtendedDiagnosticInformation(
            final DeviceExtendedDiagnosticsRequest body) throws ApiException, IOException {
        return prepareGetDeviceExtendedDiagnosticInformationRequest(body).execute();
    }

    /**
     * Returns extended diagnostic information about a specified device, including connectivity,
     * provisioning, billing and location status.
     * @param  body  Required parameter: Request to query extended diagnostics information for a
     *         device.
     * @return    Returns the DeviceExtendedDiagnosticsResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceExtendedDiagnosticsResult>> getDeviceExtendedDiagnosticInformationAsync(
            final DeviceExtendedDiagnosticsRequest body) {
        try { 
            return prepareGetDeviceExtendedDiagnosticInformationRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDeviceExtendedDiagnosticInformation.
     */
    private ApiCall<ApiResponse<DeviceExtendedDiagnosticsResult>, ApiException> prepareGetDeviceExtendedDiagnosticInformationRequest(
            final DeviceExtendedDiagnosticsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceExtendedDiagnosticsResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/extendeddiagnostics/actions/list")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceExtendedDiagnosticsResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns the provisioning history of a specified device during a specified time period.
     * @param  body  Required parameter: Query to obtain device provisioning history.
     * @return    Returns the List of DeviceProvisioningHistoryListResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<DeviceProvisioningHistoryListResult>> listDevicesProvisioningHistory(
            final DeviceProvisioningHistoryListRequest body) throws ApiException, IOException {
        return prepareListDevicesProvisioningHistoryRequest(body).execute();
    }

    /**
     * Returns the provisioning history of a specified device during a specified time period.
     * @param  body  Required parameter: Query to obtain device provisioning history.
     * @return    Returns the List of DeviceProvisioningHistoryListResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<DeviceProvisioningHistoryListResult>>> listDevicesProvisioningHistoryAsync(
            final DeviceProvisioningHistoryListRequest body) {
        try { 
            return prepareListDevicesProvisioningHistoryRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDevicesProvisioningHistory.
     */
    private ApiCall<ApiResponse<List<DeviceProvisioningHistoryListResult>>, ApiException> prepareListDevicesProvisioningHistoryRequest(
            final DeviceProvisioningHistoryListRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<List<DeviceProvisioningHistoryListResult>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/history/actions/list")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        DeviceProvisioningHistoryListResult[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * 4G and GSM devices do not have a PRL.
     * @param  body  Required parameter: Request to query device PRL.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> listCurrentDevicesPRLVersion(
            final DevicePrlListRequest body) throws ApiException, IOException {
        return prepareListCurrentDevicesPRLVersionRequest(body).execute();
    }

    /**
     * 4G and GSM devices do not have a PRL.
     * @param  body  Required parameter: Request to query device PRL.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> listCurrentDevicesPRLVersionAsync(
            final DevicePrlListRequest body) {
        try { 
            return prepareListCurrentDevicesPRLVersionRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listCurrentDevicesPRLVersion.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareListCurrentDevicesPRLVersionRequest(
            final DevicePrlListRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/prl/actions/list")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns DeviceSuspensionStatus callback messages containing the current device state and
     * information on how many days a device has been suspended and can continue to be suspended.
     * @param  body  Required parameter: Request to obtain service suspenstion status for a device.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> getDeviceServiceSuspensionStatus(
            final DeviceSuspensionStatusRequest body) throws ApiException, IOException {
        return prepareGetDeviceServiceSuspensionStatusRequest(body).execute();
    }

    /**
     * Returns DeviceSuspensionStatus callback messages containing the current device state and
     * information on how many days a device has been suspended and can continue to be suspended.
     * @param  body  Required parameter: Request to obtain service suspenstion status for a device.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> getDeviceServiceSuspensionStatusAsync(
            final DeviceSuspensionStatusRequest body) {
        try { 
            return prepareGetDeviceServiceSuspensionStatusRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDeviceServiceSuspensionStatus.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareGetDeviceServiceSuspensionStatusRequest(
            final DeviceSuspensionStatusRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/suspension/status")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns the network data usage history of a device during a specified time period.
     * @param  body  Required parameter: Request to obtain usage history for a specific device.
     * @return    Returns the DeviceUsageListResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceUsageListResult> listDevicesUsageHistory(
            final DeviceUsageListRequest body) throws ApiException, IOException {
        return prepareListDevicesUsageHistoryRequest(body).execute();
    }

    /**
     * Returns the network data usage history of a device during a specified time period.
     * @param  body  Required parameter: Request to obtain usage history for a specific device.
     * @return    Returns the DeviceUsageListResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceUsageListResult>> listDevicesUsageHistoryAsync(
            final DeviceUsageListRequest body) {
        try { 
            return prepareListDevicesUsageHistoryRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDevicesUsageHistory.
     */
    private ApiCall<ApiResponse<DeviceUsageListResult>, ApiException> prepareListDevicesUsageHistoryRequest(
            final DeviceUsageListRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceUsageListResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/usage/actions/list")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceUsageListResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * The information is returned in a callback response, so you must register a URL for
     * DeviceUsage callback messages using the POST /callbacks API.
     * @param  body  Required parameter: A request to retrieve aggregated device usage history
     *         information.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> retrieveAggregateDeviceUsageHistory(
            final DeviceAggregateUsageListRequest body) throws ApiException, IOException {
        return prepareRetrieveAggregateDeviceUsageHistoryRequest(body).execute();
    }

    /**
     * The information is returned in a callback response, so you must register a URL for
     * DeviceUsage callback messages using the POST /callbacks API.
     * @param  body  Required parameter: A request to retrieve aggregated device usage history
     *         information.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> retrieveAggregateDeviceUsageHistoryAsync(
            final DeviceAggregateUsageListRequest body) {
        try { 
            return prepareRetrieveAggregateDeviceUsageHistoryRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for retrieveAggregateDeviceUsageHistory.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareRetrieveAggregateDeviceUsageHistoryRequest(
            final DeviceAggregateUsageListRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/usage/actions/list/aggregate")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Changes the identifier of a 3G or 4G device to match hardware changes made for a line of
     * service. Use this request to transfer the line of service and the MDN to new hardware, or to
     * change the MDN.
     * @param  serviceType  Required parameter: Identifier type.
     * @param  body  Required parameter: Request to update device id.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> updateDeviceId(
            final String serviceType,
            final ChangeDeviceIdRequest body) throws ApiException, IOException {
        return prepareUpdateDeviceIdRequest(serviceType, body).execute();
    }

    /**
     * Changes the identifier of a 3G or 4G device to match hardware changes made for a line of
     * service. Use this request to transfer the line of service and the MDN to new hardware, or to
     * change the MDN.
     * @param  serviceType  Required parameter: Identifier type.
     * @param  body  Required parameter: Request to update device id.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> updateDeviceIdAsync(
            final String serviceType,
            final ChangeDeviceIdRequest body) {
        try { 
            return prepareUpdateDeviceIdRequest(serviceType, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateDeviceId.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareUpdateDeviceIdRequest(
            final String serviceType,
            final ChangeDeviceIdRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/{serviceType}/actions/deviceId")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("serviceType").value(serviceType)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This corresponds to the M2M-MC SOAP interface, ```DeviceUploadService```.
     * @param  body  Required parameter: Device Upload Query
     * @return    Returns the RequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<RequestResponse> deviceUpload(
            final DeviceUploadRequest body) throws ApiException, IOException {
        return prepareDeviceUploadRequest(body).execute();
    }

    /**
     * This corresponds to the M2M-MC SOAP interface, ```DeviceUploadService```.
     * @param  body  Required parameter: Device Upload Query
     * @return    Returns the RequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<RequestResponse>> deviceUploadAsync(
            final DeviceUploadRequest body) {
        try { 
            return prepareDeviceUploadRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deviceUpload.
     */
    private ApiCall<ApiResponse<RequestResponse>, ApiException> prepareDeviceUploadRequest(
            final DeviceUploadRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<RequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/upload")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, RequestResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error Response",
                                (reason, context) -> new RestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets billed usage for for either multiple devices or an entire billing account.
     * @param  body  Required parameter: Request to list devices with mismatched IMEIs and ICCIDs.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> billedUsageInfo(
            final BilledusageListRequest body) throws ApiException, IOException {
        return prepareBilledUsageInfoRequest(body).execute();
    }

    /**
     * Gets billed usage for for either multiple devices or an entire billing account.
     * @param  body  Required parameter: Request to list devices with mismatched IMEIs and ICCIDs.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> billedUsageInfoAsync(
            final BilledusageListRequest body) {
        try { 
            return prepareBilledUsageInfoRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for billedUsageInfo.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareBilledUsageInfoRequest(
            final BilledusageListRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/usage/actions/billedusage/list")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Allows you to associate your own usage segmentation label with a device.
     * @param  body  Required parameter: Request to associate a label to a device.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> usageSegmentationLabelAssociation(
            final AssociateLabelRequest body) throws ApiException, IOException {
        return prepareUsageSegmentationLabelAssociationRequest(body).execute();
    }

    /**
     * Allows you to associate your own usage segmentation label with a device.
     * @param  body  Required parameter: Request to associate a label to a device.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> usageSegmentationLabelAssociationAsync(
            final AssociateLabelRequest body) {
        try { 
            return prepareUsageSegmentationLabelAssociationRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for usageSegmentationLabelAssociation.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareUsageSegmentationLabelAssociationRequest(
            final AssociateLabelRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/usagesegmentationlabels")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Allow customers to remove the associated label from a device.
     * @param  accountName  Required parameter: The numeric name of the account.
     * @param  labelList  Required parameter: A list of the Label IDs to remove from the exclusion
     *         list.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> usageSegmentationLabelDeletion(
            final String accountName,
            final LabelsList labelList) throws ApiException, IOException {
        return prepareUsageSegmentationLabelDeletionRequest(accountName, labelList).execute();
    }

    /**
     * Allow customers to remove the associated label from a device.
     * @param  accountName  Required parameter: The numeric name of the account.
     * @param  labelList  Required parameter: A list of the Label IDs to remove from the exclusion
     *         list.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> usageSegmentationLabelDeletionAsync(
            final String accountName,
            final LabelsList labelList) {
        try { 
            return prepareUsageSegmentationLabelDeletionRequest(accountName, labelList).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for usageSegmentationLabelDeletion.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareUsageSegmentationLabelDeletionRequest(
            final String accountName,
            final LabelsList labelList) throws IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/usagesegmentationlabels")
                        .queryParam(param -> param.key("accountName")
                                .value(accountName))
                        .queryParam(param -> param.key("LabelList")
                                .value(labelList))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Uploads and activates device identifiers and SKUs for new devices from OEMs to Verizon.
     * @param  body  Required parameter: Request to Uploads and activates device.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> activationOrderStatus(
            final UploadsActivatesDeviceRequest body) throws ApiException, IOException {
        return prepareActivationOrderStatusRequest(body).execute();
    }

    /**
     * Uploads and activates device identifiers and SKUs for new devices from OEMs to Verizon.
     * @param  body  Required parameter: Request to Uploads and activates device.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> activationOrderStatusAsync(
            final UploadsActivatesDeviceRequest body) {
        try { 
            return prepareActivationOrderStatusRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for activationOrderStatus.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareActivationOrderStatusRequest(
            final UploadsActivatesDeviceRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/actions/uploadactivate")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Checks the status of an activation order and lists where the order is in the provisioning
     * process.
     * @param  body  Required parameter: The request body identifies the device and reporting period
     *         that you want included in the report.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceManagementResult> uploadDeviceIdentifier(
            final CheckOrderStatusRequest body) throws ApiException, IOException {
        return prepareUploadDeviceIdentifierRequest(body).execute();
    }

    /**
     * Checks the status of an activation order and lists where the order is in the provisioning
     * process.
     * @param  body  Required parameter: The request body identifies the device and reporting period
     *         that you want included in the report.
     * @return    Returns the DeviceManagementResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceManagementResult>> uploadDeviceIdentifierAsync(
            final CheckOrderStatusRequest body) {
        try { 
            return prepareUploadDeviceIdentifierRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for uploadDeviceIdentifier.
     */
    private ApiCall<ApiResponse<DeviceManagementResult>, ApiException> prepareUploadDeviceIdentifierRequest(
            final CheckOrderStatusRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceManagementResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/requests/status")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceManagementResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new ConnectivityManagementResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}