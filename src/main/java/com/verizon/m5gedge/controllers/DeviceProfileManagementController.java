/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.RestErrorResponseException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.ActivateDeviceProfileRequest;
import com.verizon.m5gedge.models.DeactivateDeviceProfileRequest;
import com.verizon.m5gedge.models.ProfileRequest;
import com.verizon.m5gedge.models.RequestResponse;
import com.verizon.m5gedge.models.SetFallbackAttributeRequest;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DeviceProfileManagementController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DeviceProfileManagementController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Uses the profile to activate the device.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the RequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<RequestResponse> profileToActivateDevice(
            final ProfileRequest body) throws ApiException, IOException {
        return prepareProfileToActivateDeviceRequest(body).execute();
    }

    /**
     * Uses the profile to activate the device.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the RequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<RequestResponse>> profileToActivateDeviceAsync(
            final ProfileRequest body) {
        try { 
            return prepareProfileToActivateDeviceRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for profileToActivateDevice.
     */
    private ApiCall<ApiResponse<RequestResponse>, ApiException> prepareProfileToActivateDeviceRequest(
            final ProfileRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<RequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/profile/actions/activate")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, RequestResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request",
                                (reason, context) -> new RestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Uses the profile to bring the device under management.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the RequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<RequestResponse> activateDeviceThroughProfile(
            final ActivateDeviceProfileRequest body) throws ApiException, IOException {
        return prepareActivateDeviceThroughProfileRequest(body).execute();
    }

    /**
     * Uses the profile to bring the device under management.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the RequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<RequestResponse>> activateDeviceThroughProfileAsync(
            final ActivateDeviceProfileRequest body) {
        try { 
            return prepareActivateDeviceThroughProfileRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for activateDeviceThroughProfile.
     */
    private ApiCall<ApiResponse<RequestResponse>, ApiException> prepareActivateDeviceThroughProfileRequest(
            final ActivateDeviceProfileRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<RequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/profile/actions/activate_enable")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, RequestResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request",
                                (reason, context) -> new RestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Uses the profile to deactivate the device.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the RequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<RequestResponse> profileToDeactivateDevice(
            final DeactivateDeviceProfileRequest body) throws ApiException, IOException {
        return prepareProfileToDeactivateDeviceRequest(body).execute();
    }

    /**
     * Uses the profile to deactivate the device.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the RequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<RequestResponse>> profileToDeactivateDeviceAsync(
            final DeactivateDeviceProfileRequest body) {
        try { 
            return prepareProfileToDeactivateDeviceRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for profileToDeactivateDevice.
     */
    private ApiCall<ApiResponse<RequestResponse>, ApiException> prepareProfileToDeactivateDeviceRequest(
            final DeactivateDeviceProfileRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<RequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/profile/actions/deactivate")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, RequestResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request",
                                (reason, context) -> new RestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Allows the profile to set the fallback attribute to the device.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the RequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<RequestResponse> profileToSetFallbackAttribute(
            final SetFallbackAttributeRequest body) throws ApiException, IOException {
        return prepareProfileToSetFallbackAttributeRequest(body).execute();
    }

    /**
     * Allows the profile to set the fallback attribute to the device.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the RequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<RequestResponse>> profileToSetFallbackAttributeAsync(
            final SetFallbackAttributeRequest body) {
        try { 
            return prepareProfileToSetFallbackAttributeRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for profileToSetFallbackAttribute.
     */
    private ApiCall<ApiResponse<RequestResponse>, ApiException> prepareProfileToSetFallbackAttributeRequest(
            final SetFallbackAttributeRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<RequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/profile/actions/setfallbackattribute")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, RequestResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request",
                                (reason, context) -> new RestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}