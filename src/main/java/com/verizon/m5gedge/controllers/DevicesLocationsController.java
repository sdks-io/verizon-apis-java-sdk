/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.DeviceLocationResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.AsynchronousLocationRequestResult;
import com.verizon.m5gedge.models.Location;
import com.verizon.m5gedge.models.LocationReport;
import com.verizon.m5gedge.models.LocationReportStatus;
import com.verizon.m5gedge.models.LocationRequest;
import com.verizon.m5gedge.models.SynchronousLocationRequestResult;
import com.verizon.m5gedge.models.TransactionID;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DevicesLocationsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DevicesLocationsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Requests the current or cached location of up to 10,000 IoT or consumer devices (phones,
     * tablets. etc.). This request returns a synchronous transaction ID, and the location
     * information for each device is returned asynchronously as a DeviceLocation callback message.
     * @param  body  Required parameter: An asynchronous request to obtain locations of devices.
     * @return    Returns the SynchronousLocationRequestResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<SynchronousLocationRequestResult> listDevicesLocationsAsynchronous(
            final LocationRequest body) throws ApiException, IOException {
        return prepareListDevicesLocationsAsynchronousRequest(body).execute();
    }

    /**
     * Requests the current or cached location of up to 10,000 IoT or consumer devices (phones,
     * tablets. etc.). This request returns a synchronous transaction ID, and the location
     * information for each device is returned asynchronously as a DeviceLocation callback message.
     * @param  body  Required parameter: An asynchronous request to obtain locations of devices.
     * @return    Returns the SynchronousLocationRequestResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<SynchronousLocationRequestResult>> listDevicesLocationsAsynchronousAsync(
            final LocationRequest body) {
        try { 
            return prepareListDevicesLocationsAsynchronousRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDevicesLocationsAsynchronous.
     */
    private ApiCall<ApiResponse<SynchronousLocationRequestResult>, ApiException> prepareListDevicesLocationsAsynchronousRequest(
            final LocationRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<SynchronousLocationRequestResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_LOCATION.value())
                        .path("/devicelocations")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("*/*").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, SynchronousLocationRequestResult.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Cancel a queued device location report.
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  txid  Required parameter: Transaction ID of the report to cancel.
     * @return    Returns the TransactionID wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<TransactionID> cancelQueuedLocationReportGeneration(
            final String account,
            final String txid) throws ApiException, IOException {
        return prepareCancelQueuedLocationReportGenerationRequest(account, txid).execute();
    }

    /**
     * Cancel a queued device location report.
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  txid  Required parameter: Transaction ID of the report to cancel.
     * @return    Returns the TransactionID wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<TransactionID>> cancelQueuedLocationReportGenerationAsync(
            final String account,
            final String txid) {
        try { 
            return prepareCancelQueuedLocationReportGenerationRequest(account, txid).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for cancelQueuedLocationReportGeneration.
     */
    private ApiCall<ApiResponse<TransactionID>, ApiException> prepareCancelQueuedLocationReportGenerationRequest(
            final String account,
            final String txid) throws IOException {
        return new ApiCall.Builder<ApiResponse<TransactionID>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_LOCATION.value())
                        .path("/locationreports/{account}/report/{txid}")
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("txid").value(txid)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, TransactionID.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This locations endpoint retrieves the locations for a list of devices.
     * @param  body  Required parameter: Request to obtain location of devices.
     * @return    Returns the List of Location wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<Location>> listDevicesLocationsSynchronous(
            final LocationRequest body) throws ApiException, IOException {
        return prepareListDevicesLocationsSynchronousRequest(body).execute();
    }

    /**
     * This locations endpoint retrieves the locations for a list of devices.
     * @param  body  Required parameter: Request to obtain location of devices.
     * @return    Returns the List of Location wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<Location>>> listDevicesLocationsSynchronousAsync(
            final LocationRequest body) {
        try { 
            return prepareListDevicesLocationsSynchronousRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDevicesLocationsSynchronous.
     */
    private ApiCall<ApiResponse<List<Location>>, ApiException> prepareListDevicesLocationsSynchronousRequest(
            final LocationRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<List<Location>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_LOCATION.value())
                        .path("/locations")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Location[].class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Cancel a queued or unfinished device location request.
     * @param  accountName  Required parameter: Account identifier in "##########-#####".
     * @param  txid  Required parameter: Transaction ID of the request to cancel, from the
     *         synchronous response to the original request.
     * @return    Returns the TransactionID wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<TransactionID> cancelDeviceLocationRequest(
            final String accountName,
            final String txid) throws ApiException, IOException {
        return prepareCancelDeviceLocationRequestRequest(accountName, txid).execute();
    }

    /**
     * Cancel a queued or unfinished device location request.
     * @param  accountName  Required parameter: Account identifier in "##########-#####".
     * @param  txid  Required parameter: Transaction ID of the request to cancel, from the
     *         synchronous response to the original request.
     * @return    Returns the TransactionID wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<TransactionID>> cancelDeviceLocationRequestAsync(
            final String accountName,
            final String txid) {
        try { 
            return prepareCancelDeviceLocationRequestRequest(accountName, txid).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for cancelDeviceLocationRequest.
     */
    private ApiCall<ApiResponse<TransactionID>, ApiException> prepareCancelDeviceLocationRequestRequest(
            final String accountName,
            final String txid) throws IOException {
        return new ApiCall.Builder<ApiResponse<TransactionID>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_LOCATION.value())
                        .path("/devicelocations/{txid}")
                        .queryParam(param -> param.key("accountName")
                                .value(accountName))
                        .templateParam(param -> param.key("txid").value(txid)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, TransactionID.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Download a completed asynchronous device location report.
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  txid  Required parameter: Transaction ID from POST /locationreports response.
     * @param  startindex  Required parameter: Zero-based number of the first record to return.
     * @return    Returns the LocationReport wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<LocationReport> retrieveLocationReport(
            final String account,
            final String txid,
            final int startindex) throws ApiException, IOException {
        return prepareRetrieveLocationReportRequest(account, txid, startindex).execute();
    }

    /**
     * Download a completed asynchronous device location report.
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  txid  Required parameter: Transaction ID from POST /locationreports response.
     * @param  startindex  Required parameter: Zero-based number of the first record to return.
     * @return    Returns the LocationReport wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<LocationReport>> retrieveLocationReportAsync(
            final String account,
            final String txid,
            final int startindex) {
        try { 
            return prepareRetrieveLocationReportRequest(account, txid, startindex).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for retrieveLocationReport.
     */
    private ApiCall<ApiResponse<LocationReport>, ApiException> prepareRetrieveLocationReportRequest(
            final String account,
            final String txid,
            final int startindex) throws IOException {
        return new ApiCall.Builder<ApiResponse<LocationReport>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_LOCATION.value())
                        .path("/locationreports/{account}/report/{txid}/index/{startindex}")
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("txid").value(txid)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("startindex").value(startindex).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, LocationReport.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Request an asynchronous device location report.
     * @param  body  Required parameter: Request for device location report.
     * @return    Returns the AsynchronousLocationRequestResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<AsynchronousLocationRequestResult> createLocationReport(
            final LocationRequest body) throws ApiException, IOException {
        return prepareCreateLocationReportRequest(body).execute();
    }

    /**
     * Request an asynchronous device location report.
     * @param  body  Required parameter: Request for device location report.
     * @return    Returns the AsynchronousLocationRequestResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<AsynchronousLocationRequestResult>> createLocationReportAsync(
            final LocationRequest body) {
        try { 
            return prepareCreateLocationReportRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createLocationReport.
     */
    private ApiCall<ApiResponse<AsynchronousLocationRequestResult>, ApiException> prepareCreateLocationReportRequest(
            final LocationRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<AsynchronousLocationRequestResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_LOCATION.value())
                        .path("/locationreports")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("*/*").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, AsynchronousLocationRequestResult.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns the current status of a requested device location report.
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  txid  Required parameter: Transaction ID of the report.
     * @return    Returns the LocationReportStatus wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<LocationReportStatus> getLocationReportStatus(
            final String account,
            final String txid) throws ApiException, IOException {
        return prepareGetLocationReportStatusRequest(account, txid).execute();
    }

    /**
     * Returns the current status of a requested device location report.
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  txid  Required parameter: Transaction ID of the report.
     * @return    Returns the LocationReportStatus wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<LocationReportStatus>> getLocationReportStatusAsync(
            final String account,
            final String txid) {
        try { 
            return prepareGetLocationReportStatusRequest(account, txid).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getLocationReportStatus.
     */
    private ApiCall<ApiResponse<LocationReportStatus>, ApiException> prepareGetLocationReportStatusRequest(
            final String account,
            final String txid) throws IOException {
        return new ApiCall.Builder<ApiResponse<LocationReportStatus>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_LOCATION.value())
                        .path("/locationreports/{account}/report/{txid}/status")
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("txid").value(txid)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, LocationReportStatus.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}