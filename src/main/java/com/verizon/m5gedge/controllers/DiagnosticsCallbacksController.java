/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.DeviceDiagnosticsResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.CallbackRegistrationRequest;
import com.verizon.m5gedge.models.DeviceDiagnosticsCallback;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DiagnosticsCallbacksController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DiagnosticsCallbacksController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This endpoint allows user to get the registered callback information of an existing
     * diagnostics subscription.
     * @param  accountName  Required parameter: Account identifier.
     * @return    Returns the List of DeviceDiagnosticsCallback wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<DeviceDiagnosticsCallback>> getDiagnosticsSubscriptionCallbackInfo(
            final String accountName) throws ApiException, IOException {
        return prepareGetDiagnosticsSubscriptionCallbackInfoRequest(accountName).execute();
    }

    /**
     * This endpoint allows user to get the registered callback information of an existing
     * diagnostics subscription.
     * @param  accountName  Required parameter: Account identifier.
     * @return    Returns the List of DeviceDiagnosticsCallback wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<DeviceDiagnosticsCallback>>> getDiagnosticsSubscriptionCallbackInfoAsync(
            final String accountName) {
        try { 
            return prepareGetDiagnosticsSubscriptionCallbackInfoRequest(accountName).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDiagnosticsSubscriptionCallbackInfo.
     */
    private ApiCall<ApiResponse<List<DeviceDiagnosticsCallback>>, ApiException> prepareGetDiagnosticsSubscriptionCallbackInfoRequest(
            final String accountName) throws IOException {
        return new ApiCall.Builder<ApiResponse<List<DeviceDiagnosticsCallback>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_DIAGNOSTICS.value())
                        .path("/callbacks")
                        .queryParam(param -> param.key("accountName")
                                .value(accountName))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        DeviceDiagnosticsCallback[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new DeviceDiagnosticsResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint allows user update the callback HTTPS address of an existing diagnostics
     * subscription.
     * @param  body  Required parameter: Callback URL registration request.
     * @return    Returns the DeviceDiagnosticsCallback wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceDiagnosticsCallback> registerDiagnosticsCallbackURL(
            final CallbackRegistrationRequest body) throws ApiException, IOException {
        return prepareRegisterDiagnosticsCallbackURLRequest(body).execute();
    }

    /**
     * This endpoint allows user update the callback HTTPS address of an existing diagnostics
     * subscription.
     * @param  body  Required parameter: Callback URL registration request.
     * @return    Returns the DeviceDiagnosticsCallback wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceDiagnosticsCallback>> registerDiagnosticsCallbackURLAsync(
            final CallbackRegistrationRequest body) {
        try { 
            return prepareRegisterDiagnosticsCallbackURLRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for registerDiagnosticsCallbackURL.
     */
    private ApiCall<ApiResponse<DeviceDiagnosticsCallback>, ApiException> prepareRegisterDiagnosticsCallbackURLRequest(
            final CallbackRegistrationRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceDiagnosticsCallback>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_DIAGNOSTICS.value())
                        .path("/callbacks")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("*/*").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceDiagnosticsCallback.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new DeviceDiagnosticsResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint allows user to delete a registered callback URL and credential.
     * @param  accountName  Required parameter: Account identifier.
     * @param  serviceName  Required parameter: Service name for callback notification.
     * @return    Returns the DeviceDiagnosticsCallback wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceDiagnosticsCallback> unregisterDiagnosticsCallback(
            final String accountName,
            final String serviceName) throws ApiException, IOException {
        return prepareUnregisterDiagnosticsCallbackRequest(accountName, serviceName).execute();
    }

    /**
     * This endpoint allows user to delete a registered callback URL and credential.
     * @param  accountName  Required parameter: Account identifier.
     * @param  serviceName  Required parameter: Service name for callback notification.
     * @return    Returns the DeviceDiagnosticsCallback wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceDiagnosticsCallback>> unregisterDiagnosticsCallbackAsync(
            final String accountName,
            final String serviceName) {
        try { 
            return prepareUnregisterDiagnosticsCallbackRequest(accountName, serviceName).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for unregisterDiagnosticsCallback.
     */
    private ApiCall<ApiResponse<DeviceDiagnosticsCallback>, ApiException> prepareUnregisterDiagnosticsCallbackRequest(
            final String accountName,
            final String serviceName) throws IOException {
        return new ApiCall.Builder<ApiResponse<DeviceDiagnosticsCallback>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_DIAGNOSTICS.value())
                        .path("/callbacks")
                        .queryParam(param -> param.key("accountName")
                                .value(accountName))
                        .queryParam(param -> param.key("serviceName")
                                .value(serviceName))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceDiagnosticsCallback.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new DeviceDiagnosticsResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}