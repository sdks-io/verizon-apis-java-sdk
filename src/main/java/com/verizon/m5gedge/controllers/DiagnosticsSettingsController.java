/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.DeviceDiagnosticsResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.DiagnosticObservationSetting;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DiagnosticsSettingsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DiagnosticsSettingsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This endpoint retrieves diagnostics settings synchronously.
     * @param  accountName  Required parameter: Account identifier.
     * @param  devices  Required parameter: Devices list format:
     *         [{"id":"{imei1}","kind":"imei"},{"id":"{imei2}","kind":"imei"}].
     * @return    Returns the List of DiagnosticObservationSetting wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<DiagnosticObservationSetting>> listDiagnosticsSettings(
            final String accountName,
            final String devices) throws ApiException, IOException {
        return prepareListDiagnosticsSettingsRequest(accountName, devices).execute();
    }

    /**
     * This endpoint retrieves diagnostics settings synchronously.
     * @param  accountName  Required parameter: Account identifier.
     * @param  devices  Required parameter: Devices list format:
     *         [{"id":"{imei1}","kind":"imei"},{"id":"{imei2}","kind":"imei"}].
     * @return    Returns the List of DiagnosticObservationSetting wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<DiagnosticObservationSetting>>> listDiagnosticsSettingsAsync(
            final String accountName,
            final String devices) {
        try { 
            return prepareListDiagnosticsSettingsRequest(accountName, devices).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listDiagnosticsSettings.
     */
    private ApiCall<ApiResponse<List<DiagnosticObservationSetting>>, ApiException> prepareListDiagnosticsSettingsRequest(
            final String accountName,
            final String devices) throws IOException {
        return new ApiCall.Builder<ApiResponse<List<DiagnosticObservationSetting>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_DIAGNOSTICS.value())
                        .path("/devices/settings")
                        .queryParam(param -> param.key("accountName")
                                .value(accountName))
                        .queryParam(param -> param.key("devices")
                                .value(devices))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        DiagnosticObservationSetting[].class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response.",
                                (reason, context) -> new DeviceDiagnosticsResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}