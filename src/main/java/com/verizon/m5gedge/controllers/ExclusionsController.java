/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.DeviceLocationResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.ConsentRequest;
import com.verizon.m5gedge.models.DeviceLocationSuccessResult;
import com.verizon.m5gedge.models.DevicesConsentResult;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ExclusionsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ExclusionsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This consents endpoint sets a new exclusion list.
     * @param  body  Required parameter: Request to update account consent exclusion list.
     * @return    Returns the DeviceLocationSuccessResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceLocationSuccessResult> excludeDevices(
            final ConsentRequest body) throws ApiException, IOException {
        return prepareExcludeDevicesRequest(body).execute();
    }

    /**
     * This consents endpoint sets a new exclusion list.
     * @param  body  Required parameter: Request to update account consent exclusion list.
     * @return    Returns the DeviceLocationSuccessResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceLocationSuccessResult>> excludeDevicesAsync(
            final ConsentRequest body) {
        try { 
            return prepareExcludeDevicesRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for excludeDevices.
     */
    private ApiCall<ApiResponse<DeviceLocationSuccessResult>, ApiException> prepareExcludeDevicesRequest(
            final ConsentRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<DeviceLocationSuccessResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_LOCATION.value())
                        .path("/consents")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("*/*").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceLocationSuccessResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Removes devices from the exclusion list so that they can be located with Device Location
     * Services requests.
     * @param  accountName  Required parameter: The numeric name of the account.
     * @param  deviceList  Required parameter: A list of the device IDs to remove from the exclusion
     *         list.
     * @return    Returns the DeviceLocationSuccessResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeviceLocationSuccessResult> removeDevicesFromExclusionList(
            final String accountName,
            final String deviceList) throws ApiException, IOException {
        return prepareRemoveDevicesFromExclusionListRequest(accountName, deviceList).execute();
    }

    /**
     * Removes devices from the exclusion list so that they can be located with Device Location
     * Services requests.
     * @param  accountName  Required parameter: The numeric name of the account.
     * @param  deviceList  Required parameter: A list of the device IDs to remove from the exclusion
     *         list.
     * @return    Returns the DeviceLocationSuccessResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeviceLocationSuccessResult>> removeDevicesFromExclusionListAsync(
            final String accountName,
            final String deviceList) {
        try { 
            return prepareRemoveDevicesFromExclusionListRequest(accountName, deviceList).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for removeDevicesFromExclusionList.
     */
    private ApiCall<ApiResponse<DeviceLocationSuccessResult>, ApiException> prepareRemoveDevicesFromExclusionListRequest(
            final String accountName,
            final String deviceList) throws IOException {
        return new ApiCall.Builder<ApiResponse<DeviceLocationSuccessResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_LOCATION.value())
                        .path("/consents")
                        .queryParam(param -> param.key("accountName")
                                .value(accountName))
                        .queryParam(param -> param.key("deviceList")
                                .value(deviceList))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeviceLocationSuccessResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This consents endpoint retrieves a list of excluded devices in an account.
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  startIndex  Required parameter: Zero-based number of the first record to return.
     * @return    Returns the DevicesConsentResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DevicesConsentResult> listExcludedDevices(
            final String account,
            final String startIndex) throws ApiException, IOException {
        return prepareListExcludedDevicesRequest(account, startIndex).execute();
    }

    /**
     * This consents endpoint retrieves a list of excluded devices in an account.
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  startIndex  Required parameter: Zero-based number of the first record to return.
     * @return    Returns the DevicesConsentResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DevicesConsentResult>> listExcludedDevicesAsync(
            final String account,
            final String startIndex) {
        try { 
            return prepareListExcludedDevicesRequest(account, startIndex).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listExcludedDevices.
     */
    private ApiCall<ApiResponse<DevicesConsentResult>, ApiException> prepareListExcludedDevicesRequest(
            final String account,
            final String startIndex) throws IOException {
        return new ApiCall.Builder<ApiResponse<DevicesConsentResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.DEVICE_LOCATION.value())
                        .path("/consents/{account}/index/{startIndex}")
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("startIndex").value(startIndex)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DevicesConsentResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new DeviceLocationResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}