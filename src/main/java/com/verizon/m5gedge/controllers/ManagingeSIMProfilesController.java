/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.GIORestErrorResponseException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.DeviceProfileRequest;
import com.verizon.m5gedge.models.GIODeactivateDeviceProfileRequest;
import com.verizon.m5gedge.models.GIOProfileRequest;
import com.verizon.m5gedge.models.GIORequestResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ManagingeSIMProfilesController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ManagingeSIMProfilesController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Activate a device with either a lead or local profile.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the GIORequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<GIORequestResponse> activateADeviceProfile(
            final GIOProfileRequest body) throws ApiException, IOException {
        return prepareActivateADeviceProfileRequest(body).execute();
    }

    /**
     * Activate a device with either a lead or local profile.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the GIORequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<GIORequestResponse>> activateADeviceProfileAsync(
            final GIOProfileRequest body) {
        try { 
            return prepareActivateADeviceProfileRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for activateADeviceProfile.
     */
    private ApiCall<ApiResponse<GIORequestResponse>, ApiException> prepareActivateADeviceProfileRequest(
            final GIOProfileRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<GIORequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/profile/actions/activate")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, GIORequestResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new GIORestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Enable a device lead or local profile.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the GIORequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<GIORequestResponse> enableADeviceProfile(
            final DeviceProfileRequest body) throws ApiException, IOException {
        return prepareEnableADeviceProfileRequest(body).execute();
    }

    /**
     * Enable a device lead or local profile.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the GIORequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<GIORequestResponse>> enableADeviceProfileAsync(
            final DeviceProfileRequest body) {
        try { 
            return prepareEnableADeviceProfileRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for enableADeviceProfile.
     */
    private ApiCall<ApiResponse<GIORequestResponse>, ApiException> prepareEnableADeviceProfileRequest(
            final DeviceProfileRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<GIORequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/profile/actions/enable")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, GIORequestResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new GIORestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deactivate the lead or local profile. **Note:** to reactivate the profile, use the
     * **Activate** endpoint above.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the GIORequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<GIORequestResponse> deactivateADeviceProfile(
            final GIODeactivateDeviceProfileRequest body) throws ApiException, IOException {
        return prepareDeactivateADeviceProfileRequest(body).execute();
    }

    /**
     * Deactivate the lead or local profile. **Note:** to reactivate the profile, use the
     * **Activate** endpoint above.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the GIORequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<GIORequestResponse>> deactivateADeviceProfileAsync(
            final GIODeactivateDeviceProfileRequest body) {
        try { 
            return prepareDeactivateADeviceProfileRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deactivateADeviceProfile.
     */
    private ApiCall<ApiResponse<GIORequestResponse>, ApiException> prepareDeactivateADeviceProfileRequest(
            final GIODeactivateDeviceProfileRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<GIORequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/profile/actions/deactivate")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, GIORequestResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new GIORestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Enable the Global IoT Orchestration device profile for download.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the GIORequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<GIORequestResponse> enableADeviceProfileForDownload(
            final DeviceProfileRequest body) throws ApiException, IOException {
        return prepareEnableADeviceProfileForDownloadRequest(body).execute();
    }

    /**
     * Enable the Global IoT Orchestration device profile for download.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the GIORequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<GIORequestResponse>> enableADeviceProfileForDownloadAsync(
            final DeviceProfileRequest body) {
        try { 
            return prepareEnableADeviceProfileForDownloadRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for enableADeviceProfileForDownload.
     */
    private ApiCall<ApiResponse<GIORequestResponse>, ApiException> prepareEnableADeviceProfileForDownloadRequest(
            final DeviceProfileRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<GIORequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/profile/actions/download_enable")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, GIORequestResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new GIORestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Download a Global IoT Orchestration device profile.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the GIORequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<GIORequestResponse> downloadADeviceProfile(
            final DeviceProfileRequest body) throws ApiException, IOException {
        return prepareDownloadADeviceProfileRequest(body).execute();
    }

    /**
     * Download a Global IoT Orchestration device profile.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the GIORequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<GIORequestResponse>> downloadADeviceProfileAsync(
            final DeviceProfileRequest body) {
        try { 
            return prepareDownloadADeviceProfileRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for downloadADeviceProfile.
     */
    private ApiCall<ApiResponse<GIORequestResponse>, ApiException> prepareDownloadADeviceProfileRequest(
            final DeviceProfileRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<GIORequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/profile/actions/download")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, GIORequestResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new GIORestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a device profile for Global IoT Orchestration. **Note:** the profile must be
     * deactivated first!.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the GIORequestResponse wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<GIORequestResponse> deleteADeviceProfile(
            final DeviceProfileRequest body) throws ApiException, IOException {
        return prepareDeleteADeviceProfileRequest(body).execute();
    }

    /**
     * Delete a device profile for Global IoT Orchestration. **Note:** the profile must be
     * deactivated first!.
     * @param  body  Required parameter: Device Profile Query
     * @return    Returns the GIORequestResponse wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<GIORequestResponse>> deleteADeviceProfileAsync(
            final DeviceProfileRequest body) {
        try { 
            return prepareDeleteADeviceProfileRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteADeviceProfile.
     */
    private ApiCall<ApiResponse<GIORequestResponse>, ApiException> prepareDeleteADeviceProfileRequest(
            final DeviceProfileRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<GIORequestResponse>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.THINGSPACE.value())
                        .path("/m2m/v1/devices/profile/actions/delete")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, GIORequestResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error response",
                                (reason, context) -> new GIORestErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}