/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.EdgeDiscoveryResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.CreateServiceProfileResult;
import com.verizon.m5gedge.models.DeleteServiceProfileResult;
import com.verizon.m5gedge.models.ListServiceProfilesResult;
import com.verizon.m5gedge.models.ResourcesServiceProfile;
import com.verizon.m5gedge.models.ResourcesServiceProfileWithId;
import com.verizon.m5gedge.models.UpdateServiceProfileResult;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ServiceProfilesController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ServiceProfilesController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Creates a service profile that describes the resource requirements of a service.
     * @param  body  Required parameter: The request body passes all of the needed parameters to
     *         create a service profile. Parameters will be edited here rather than the
     *         **Parameters** section above. The `maxLatencyMs` and `clientType` parameters are both
     *         required in the request body. **Note:** The `maxLatencyMs` value must be submitted in
     *         multiples of 5. Additionally, "GPU" is future functionality and the values are not
     *         captured.
     * @return    Returns the CreateServiceProfileResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<CreateServiceProfileResult> createServiceProfile(
            final ResourcesServiceProfile body) throws ApiException, IOException {
        return prepareCreateServiceProfileRequest(body).execute();
    }

    /**
     * Creates a service profile that describes the resource requirements of a service.
     * @param  body  Required parameter: The request body passes all of the needed parameters to
     *         create a service profile. Parameters will be edited here rather than the
     *         **Parameters** section above. The `maxLatencyMs` and `clientType` parameters are both
     *         required in the request body. **Note:** The `maxLatencyMs` value must be submitted in
     *         multiples of 5. Additionally, "GPU" is future functionality and the values are not
     *         captured.
     * @return    Returns the CreateServiceProfileResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<CreateServiceProfileResult>> createServiceProfileAsync(
            final ResourcesServiceProfile body) {
        try { 
            return prepareCreateServiceProfileRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createServiceProfile.
     */
    private ApiCall<ApiResponse<CreateServiceProfileResult>, ApiException> prepareCreateServiceProfileRequest(
            final ResourcesServiceProfile body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<CreateServiceProfileResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.EDGE_DISCOVERY.value())
                        .path("/serviceprofiles")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, CreateServiceProfileResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("HTTP 400 Bad Request.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("HTTP 401 Unauthorized.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("HTTP 500 Internal Server Error.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List all service profiles registered under your API key.
     * @return    Returns the ListServiceProfilesResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ListServiceProfilesResult> listServiceProfiles() throws ApiException, IOException {
        return prepareListServiceProfilesRequest().execute();
    }

    /**
     * List all service profiles registered under your API key.
     * @return    Returns the ListServiceProfilesResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ListServiceProfilesResult>> listServiceProfilesAsync() {
        try { 
            return prepareListServiceProfilesRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listServiceProfiles.
     */
    private ApiCall<ApiResponse<ListServiceProfilesResult>, ApiException> prepareListServiceProfilesRequest() throws IOException {
        return new ApiCall.Builder<ApiResponse<ListServiceProfilesResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.EDGE_DISCOVERY.value())
                        .path("/serviceprofiles")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ListServiceProfilesResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("HTTP 400 Bad Request.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("HTTP 401 Unauthorized.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("HTTP 500 Internal Server Error.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns a specified service profile.
     * @param  serviceProfileId  Required parameter: Example:
     * @return    Returns the ResourcesServiceProfileWithId wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ResourcesServiceProfileWithId> getServiceProfile(
            final String serviceProfileId) throws ApiException, IOException {
        return prepareGetServiceProfileRequest(serviceProfileId).execute();
    }

    /**
     * Returns a specified service profile.
     * @param  serviceProfileId  Required parameter: Example:
     * @return    Returns the ResourcesServiceProfileWithId wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ResourcesServiceProfileWithId>> getServiceProfileAsync(
            final String serviceProfileId) {
        try { 
            return prepareGetServiceProfileRequest(serviceProfileId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getServiceProfile.
     */
    private ApiCall<ApiResponse<ResourcesServiceProfileWithId>, ApiException> prepareGetServiceProfileRequest(
            final String serviceProfileId) throws IOException {
        return new ApiCall.Builder<ApiResponse<ResourcesServiceProfileWithId>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.EDGE_DISCOVERY.value())
                        .path("/serviceprofiles/{serviceProfileId}")
                        .templateParam(param -> param.key("serviceProfileId").value(serviceProfileId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ResourcesServiceProfileWithId.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("HTTP 400 Bad Request.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("HTTP 401 Unauthorized.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("HTTP 500 Internal Server Error.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update the definition of a Service Profile.
     * @param  serviceProfileId  Required parameter: Example:
     * @param  body  Required parameter: The request body passes the rest of the needed parameters
     *         to create a service profile. The `maxLatencyMs` and `clientType` parameters are both
     *         required in the request body. **Note:** The `maxLatencyMs` value must be submitted in
     *         multiples of 5. Additionally, "GPU" is future functionality and the values are not
     *         captured. Default values to use are shown.
     * @return    Returns the UpdateServiceProfileResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<UpdateServiceProfileResult> updateServiceProfile(
            final String serviceProfileId,
            final ResourcesServiceProfile body) throws ApiException, IOException {
        return prepareUpdateServiceProfileRequest(serviceProfileId, body).execute();
    }

    /**
     * Update the definition of a Service Profile.
     * @param  serviceProfileId  Required parameter: Example:
     * @param  body  Required parameter: The request body passes the rest of the needed parameters
     *         to create a service profile. The `maxLatencyMs` and `clientType` parameters are both
     *         required in the request body. **Note:** The `maxLatencyMs` value must be submitted in
     *         multiples of 5. Additionally, "GPU" is future functionality and the values are not
     *         captured. Default values to use are shown.
     * @return    Returns the UpdateServiceProfileResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<UpdateServiceProfileResult>> updateServiceProfileAsync(
            final String serviceProfileId,
            final ResourcesServiceProfile body) {
        try { 
            return prepareUpdateServiceProfileRequest(serviceProfileId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateServiceProfile.
     */
    private ApiCall<ApiResponse<UpdateServiceProfileResult>, ApiException> prepareUpdateServiceProfileRequest(
            final String serviceProfileId,
            final ResourcesServiceProfile body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<UpdateServiceProfileResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.EDGE_DISCOVERY.value())
                        .path("/serviceprofiles/{serviceProfileId}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("serviceProfileId").value(serviceProfileId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, UpdateServiceProfileResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("HTTP 400 Bad Request.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("HTTP 401 Unauthorized.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("HTTP 500 Internal Server Error.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete Service Profile based on unique service profile ID.
     * @param  serviceProfileId  Required parameter: Example:
     * @return    Returns the DeleteServiceProfileResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<DeleteServiceProfileResult> deleteServiceProfile(
            final String serviceProfileId) throws ApiException, IOException {
        return prepareDeleteServiceProfileRequest(serviceProfileId).execute();
    }

    /**
     * Delete Service Profile based on unique service profile ID.
     * @param  serviceProfileId  Required parameter: Example:
     * @return    Returns the DeleteServiceProfileResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<DeleteServiceProfileResult>> deleteServiceProfileAsync(
            final String serviceProfileId) {
        try { 
            return prepareDeleteServiceProfileRequest(serviceProfileId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteServiceProfile.
     */
    private ApiCall<ApiResponse<DeleteServiceProfileResult>, ApiException> prepareDeleteServiceProfileRequest(
            final String serviceProfileId) throws IOException {
        return new ApiCall.Builder<ApiResponse<DeleteServiceProfileResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.EDGE_DISCOVERY.value())
                        .path("/serviceprofiles/{serviceProfileId}")
                        .templateParam(param -> param.key("serviceProfileId").value(serviceProfileId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, DeleteServiceProfileResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("HTTP 400 Bad Request.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("HTTP 401 Unauthorized.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("HTTP 500 Internal Server Error.",
                                (reason, context) -> new EdgeDiscoveryResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}