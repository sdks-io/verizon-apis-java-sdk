/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.FotaV3ResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.FotaV3CallbackRegistrationRequest;
import com.verizon.m5gedge.models.FotaV3CallbackRegistrationResult;
import com.verizon.m5gedge.models.FotaV3CallbackSummary;
import com.verizon.m5gedge.models.FotaV3SuccessResult;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SoftwareManagementCallbacksV3Controller extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SoftwareManagementCallbacksV3Controller(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This endpoint allows user to get the registered callback information.
     * @param  acc  Required parameter: Account identifier.
     * @return    Returns the FotaV3CallbackSummary wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<FotaV3CallbackSummary> listRegisteredCallbacks(
            final String acc) throws ApiException, IOException {
        return prepareListRegisteredCallbacksRequest(acc).execute();
    }

    /**
     * This endpoint allows user to get the registered callback information.
     * @param  acc  Required parameter: Account identifier.
     * @return    Returns the FotaV3CallbackSummary wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<FotaV3CallbackSummary>> listRegisteredCallbacksAsync(
            final String acc) {
        try { 
            return prepareListRegisteredCallbacksRequest(acc).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listRegisteredCallbacks.
     */
    private ApiCall<ApiResponse<FotaV3CallbackSummary>, ApiException> prepareListRegisteredCallbacksRequest(
            final String acc) throws IOException {
        return new ApiCall.Builder<ApiResponse<FotaV3CallbackSummary>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V3.value())
                        .path("/callbacks/{acc}")
                        .templateParam(param -> param.key("acc").value(acc)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, FotaV3CallbackSummary.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV3ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint allows the user to update the HTTPS callback address.
     * @param  acc  Required parameter: Account identifier.
     * @param  body  Required parameter: Callback URL registration.
     * @return    Returns the FotaV3CallbackRegistrationResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<FotaV3CallbackRegistrationResult> updateCallback(
            final String acc,
            final FotaV3CallbackRegistrationRequest body) throws ApiException, IOException {
        return prepareUpdateCallbackRequest(acc, body).execute();
    }

    /**
     * This endpoint allows the user to update the HTTPS callback address.
     * @param  acc  Required parameter: Account identifier.
     * @param  body  Required parameter: Callback URL registration.
     * @return    Returns the FotaV3CallbackRegistrationResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<FotaV3CallbackRegistrationResult>> updateCallbackAsync(
            final String acc,
            final FotaV3CallbackRegistrationRequest body) {
        try { 
            return prepareUpdateCallbackRequest(acc, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updateCallback.
     */
    private ApiCall<ApiResponse<FotaV3CallbackRegistrationResult>, ApiException> prepareUpdateCallbackRequest(
            final String acc,
            final FotaV3CallbackRegistrationRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<FotaV3CallbackRegistrationResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V3.value())
                        .path("/callbacks/{acc}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("acc").value(acc)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, FotaV3CallbackRegistrationResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV3ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint allows the user to create the HTTPS callback address.
     * @param  acc  Required parameter: Account identifier.
     * @param  body  Required parameter: Callback URL registration.
     * @return    Returns the FotaV3CallbackRegistrationResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<FotaV3CallbackRegistrationResult> registerCallback(
            final String acc,
            final FotaV3CallbackRegistrationRequest body) throws ApiException, IOException {
        return prepareRegisterCallbackRequest(acc, body).execute();
    }

    /**
     * This endpoint allows the user to create the HTTPS callback address.
     * @param  acc  Required parameter: Account identifier.
     * @param  body  Required parameter: Callback URL registration.
     * @return    Returns the FotaV3CallbackRegistrationResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<FotaV3CallbackRegistrationResult>> registerCallbackAsync(
            final String acc,
            final FotaV3CallbackRegistrationRequest body) {
        try { 
            return prepareRegisterCallbackRequest(acc, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for registerCallback.
     */
    private ApiCall<ApiResponse<FotaV3CallbackRegistrationResult>, ApiException> prepareRegisterCallbackRequest(
            final String acc,
            final FotaV3CallbackRegistrationRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<FotaV3CallbackRegistrationResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V3.value())
                        .path("/callbacks/{acc}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("acc").value(acc)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, FotaV3CallbackRegistrationResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV3ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint allows user to delete a previously registered callback URL.
     * @param  acc  Required parameter: Account identifier.
     * @return    Returns the FotaV3SuccessResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<FotaV3SuccessResult> deregisterCallback(
            final String acc) throws ApiException, IOException {
        return prepareDeregisterCallbackRequest(acc).execute();
    }

    /**
     * This endpoint allows user to delete a previously registered callback URL.
     * @param  acc  Required parameter: Account identifier.
     * @return    Returns the FotaV3SuccessResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<FotaV3SuccessResult>> deregisterCallbackAsync(
            final String acc) {
        try { 
            return prepareDeregisterCallbackRequest(acc).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deregisterCallback.
     */
    private ApiCall<ApiResponse<FotaV3SuccessResult>, ApiException> prepareDeregisterCallbackRequest(
            final String acc) throws IOException {
        return new ApiCall.Builder<ApiResponse<FotaV3SuccessResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V3.value())
                        .path("/callbacks/{acc}")
                        .templateParam(param -> param.key("acc").value(acc)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, FotaV3SuccessResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV3ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}