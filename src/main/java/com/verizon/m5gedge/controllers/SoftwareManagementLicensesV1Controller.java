/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.FotaV1ResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.FotaV1SuccessResult;
import com.verizon.m5gedge.models.V1LicensesAssignedRemovedRequest;
import com.verizon.m5gedge.models.V1LicensesAssignedRemovedResult;
import com.verizon.m5gedge.models.V1ListOfLicensesToRemove;
import com.verizon.m5gedge.models.V1ListOfLicensesToRemoveRequest;
import com.verizon.m5gedge.models.V1ListOfLicensesToRemoveResult;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SoftwareManagementLicensesV1Controller extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SoftwareManagementLicensesV1Controller(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Assigns licenses to a specified list of devices so that firmware upgrades can be scheduled
     * for those devices.
     * @deprecated
     * 
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  body  Required parameter: IMEIs of the devices to assign licenses to.
     * @return    Returns the V1LicensesAssignedRemovedResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public ApiResponse<V1LicensesAssignedRemovedResult> assignLicensesToDevices(
            final String account,
            final V1LicensesAssignedRemovedRequest body) throws ApiException, IOException {
        return prepareAssignLicensesToDevicesRequest(account, body).execute();
    }

    /**
     * Assigns licenses to a specified list of devices so that firmware upgrades can be scheduled
     * for those devices.
     * @deprecated
     * 
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  body  Required parameter: IMEIs of the devices to assign licenses to.
     * @return    Returns the V1LicensesAssignedRemovedResult wrapped in ApiResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<ApiResponse<V1LicensesAssignedRemovedResult>> assignLicensesToDevicesAsync(
            final String account,
            final V1LicensesAssignedRemovedRequest body) {
        try { 
            return prepareAssignLicensesToDevicesRequest(account, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for assignLicensesToDevices.
     */
    private ApiCall<ApiResponse<V1LicensesAssignedRemovedResult>, ApiException> prepareAssignLicensesToDevicesRequest(
            final String account,
            final V1LicensesAssignedRemovedRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<V1LicensesAssignedRemovedResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V1.value())
                        .path("/licenses/{account}/assign")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, V1LicensesAssignedRemovedResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV1ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Remove unused licenses from device.
     * @deprecated
     * 
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  body  Required parameter: IMEIs of the devices to remove licenses from.
     * @return    Returns the V1LicensesAssignedRemovedResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public ApiResponse<V1LicensesAssignedRemovedResult> removeLicensesFromDevices(
            final String account,
            final V1LicensesAssignedRemovedRequest body) throws ApiException, IOException {
        return prepareRemoveLicensesFromDevicesRequest(account, body).execute();
    }

    /**
     * Remove unused licenses from device.
     * @deprecated
     * 
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  body  Required parameter: IMEIs of the devices to remove licenses from.
     * @return    Returns the V1LicensesAssignedRemovedResult wrapped in ApiResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<ApiResponse<V1LicensesAssignedRemovedResult>> removeLicensesFromDevicesAsync(
            final String account,
            final V1LicensesAssignedRemovedRequest body) {
        try { 
            return prepareRemoveLicensesFromDevicesRequest(account, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for removeLicensesFromDevices.
     */
    private ApiCall<ApiResponse<V1LicensesAssignedRemovedResult>, ApiException> prepareRemoveLicensesFromDevicesRequest(
            final String account,
            final V1LicensesAssignedRemovedRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<V1LicensesAssignedRemovedResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V1.value())
                        .path("/licenses/{account}/remove")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, V1LicensesAssignedRemovedResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV1ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a list of devices from which licenses will be removed if the number of MRC licenses
     * becomes less than the number of assigned licenses.
     * @deprecated
     * 
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  body  Required parameter: Cancellation candidate device list.
     * @return    Returns the V1ListOfLicensesToRemoveResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public ApiResponse<V1ListOfLicensesToRemoveResult> createListOfLicensesToRemove(
            final String account,
            final V1ListOfLicensesToRemoveRequest body) throws ApiException, IOException {
        return prepareCreateListOfLicensesToRemoveRequest(account, body).execute();
    }

    /**
     * Creates a list of devices from which licenses will be removed if the number of MRC licenses
     * becomes less than the number of assigned licenses.
     * @deprecated
     * 
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  body  Required parameter: Cancellation candidate device list.
     * @return    Returns the V1ListOfLicensesToRemoveResult wrapped in ApiResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<ApiResponse<V1ListOfLicensesToRemoveResult>> createListOfLicensesToRemoveAsync(
            final String account,
            final V1ListOfLicensesToRemoveRequest body) {
        try { 
            return prepareCreateListOfLicensesToRemoveRequest(account, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createListOfLicensesToRemove.
     */
    private ApiCall<ApiResponse<V1ListOfLicensesToRemoveResult>, ApiException> prepareCreateListOfLicensesToRemoveRequest(
            final String account,
            final V1ListOfLicensesToRemoveRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<V1ListOfLicensesToRemoveResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V1.value())
                        .path("/licenses/{account}/cancel")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, V1ListOfLicensesToRemoveResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV1ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deletes the entire list of cancellation candidate devices.
     * @deprecated
     * 
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @return    Returns the FotaV1SuccessResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public ApiResponse<FotaV1SuccessResult> deleteListOfLicensesToRemove(
            final String account) throws ApiException, IOException {
        return prepareDeleteListOfLicensesToRemoveRequest(account).execute();
    }

    /**
     * Deletes the entire list of cancellation candidate devices.
     * @deprecated
     * 
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @return    Returns the FotaV1SuccessResult wrapped in ApiResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<ApiResponse<FotaV1SuccessResult>> deleteListOfLicensesToRemoveAsync(
            final String account) {
        try { 
            return prepareDeleteListOfLicensesToRemoveRequest(account).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteListOfLicensesToRemove.
     */
    private ApiCall<ApiResponse<FotaV1SuccessResult>, ApiException> prepareDeleteListOfLicensesToRemoveRequest(
            final String account) throws IOException {
        return new ApiCall.Builder<ApiResponse<FotaV1SuccessResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V1.value())
                        .path("/licenses/{account}/cancel")
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, FotaV1SuccessResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV1ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns a list of devices from which licenses will be removed if the number of MRC licenses
     * becomes less than the number of assigned licenses.
     * @deprecated
     * 
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  startIndex  Required parameter: The zero-based number of the first record to return.
     *         Set startIndex=0 for the first request. If there are more than 1,000 devices in the
     *         response, set startIndex=1000 for the second request, 2000 for the third request,
     *         etc.
     * @return    Returns the V1ListOfLicensesToRemove wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public ApiResponse<V1ListOfLicensesToRemove> listLicensesToRemove(
            final String account,
            final String startIndex) throws ApiException, IOException {
        return prepareListLicensesToRemoveRequest(account, startIndex).execute();
    }

    /**
     * Returns a list of devices from which licenses will be removed if the number of MRC licenses
     * becomes less than the number of assigned licenses.
     * @deprecated
     * 
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  startIndex  Required parameter: The zero-based number of the first record to return.
     *         Set startIndex=0 for the first request. If there are more than 1,000 devices in the
     *         response, set startIndex=1000 for the second request, 2000 for the third request,
     *         etc.
     * @return    Returns the V1ListOfLicensesToRemove wrapped in ApiResponse response from the API call
     */
    @Deprecated
    public CompletableFuture<ApiResponse<V1ListOfLicensesToRemove>> listLicensesToRemoveAsync(
            final String account,
            final String startIndex) {
        try { 
            return prepareListLicensesToRemoveRequest(account, startIndex).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listLicensesToRemove.
     */
    private ApiCall<ApiResponse<V1ListOfLicensesToRemove>, ApiException> prepareListLicensesToRemoveRequest(
            final String account,
            final String startIndex) throws IOException {
        return new ApiCall.Builder<ApiResponse<V1ListOfLicensesToRemove>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V1.value())
                        .path("/licenses/{account}/cancel/index/{startIndex}")
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("startIndex").value(startIndex)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, V1ListOfLicensesToRemove.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV1ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}