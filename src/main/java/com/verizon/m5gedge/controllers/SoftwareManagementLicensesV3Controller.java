/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.FotaV3ResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.V3LicenseAssignedRemovedResult;
import com.verizon.m5gedge.models.V3LicenseIMEI;
import com.verizon.m5gedge.models.V3LicenseSummary;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SoftwareManagementLicensesV3Controller extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SoftwareManagementLicensesV3Controller(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * The endpoint allows user to list license usage.
     * @param  acc  Required parameter: Account identifier.
     * @param  lastSeenDeviceId  Optional parameter: Last seen device identifier.
     * @return    Returns the V3LicenseSummary wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<V3LicenseSummary> getAccountLicensesStatus(
            final String acc,
            final String lastSeenDeviceId) throws ApiException, IOException {
        return prepareGetAccountLicensesStatusRequest(acc, lastSeenDeviceId).execute();
    }

    /**
     * The endpoint allows user to list license usage.
     * @param  acc  Required parameter: Account identifier.
     * @param  lastSeenDeviceId  Optional parameter: Last seen device identifier.
     * @return    Returns the V3LicenseSummary wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<V3LicenseSummary>> getAccountLicensesStatusAsync(
            final String acc,
            final String lastSeenDeviceId) {
        try { 
            return prepareGetAccountLicensesStatusRequest(acc, lastSeenDeviceId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getAccountLicensesStatus.
     */
    private ApiCall<ApiResponse<V3LicenseSummary>, ApiException> prepareGetAccountLicensesStatusRequest(
            final String acc,
            final String lastSeenDeviceId) throws IOException {
        return new ApiCall.Builder<ApiResponse<V3LicenseSummary>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V3.value())
                        .path("/licenses/{acc}")
                        .queryParam(param -> param.key("lastSeenDeviceId")
                                .value(lastSeenDeviceId).isRequired(false))
                        .templateParam(param -> param.key("acc").value(acc)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, V3LicenseSummary.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV3ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint allows user to assign licenses to a list of devices.
     * @param  acc  Required parameter: Account identifier.
     * @param  body  Required parameter: License assignment.
     * @return    Returns the V3LicenseAssignedRemovedResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<V3LicenseAssignedRemovedResult> assignLicensesToDevices(
            final String acc,
            final V3LicenseIMEI body) throws ApiException, IOException {
        return prepareAssignLicensesToDevicesRequest(acc, body).execute();
    }

    /**
     * This endpoint allows user to assign licenses to a list of devices.
     * @param  acc  Required parameter: Account identifier.
     * @param  body  Required parameter: License assignment.
     * @return    Returns the V3LicenseAssignedRemovedResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<V3LicenseAssignedRemovedResult>> assignLicensesToDevicesAsync(
            final String acc,
            final V3LicenseIMEI body) {
        try { 
            return prepareAssignLicensesToDevicesRequest(acc, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for assignLicensesToDevices.
     */
    private ApiCall<ApiResponse<V3LicenseAssignedRemovedResult>, ApiException> prepareAssignLicensesToDevicesRequest(
            final String acc,
            final V3LicenseIMEI body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<V3LicenseAssignedRemovedResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V3.value())
                        .path("/licenses/{acc}/assign")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("acc").value(acc)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, V3LicenseAssignedRemovedResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV3ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint allows user to remove licenses from a list of devices.
     * @param  acc  Required parameter: Account identifier.
     * @param  body  Required parameter: License removal.
     * @return    Returns the V3LicenseAssignedRemovedResult wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<V3LicenseAssignedRemovedResult> removeLicensesFromDevices(
            final String acc,
            final V3LicenseIMEI body) throws ApiException, IOException {
        return prepareRemoveLicensesFromDevicesRequest(acc, body).execute();
    }

    /**
     * This endpoint allows user to remove licenses from a list of devices.
     * @param  acc  Required parameter: Account identifier.
     * @param  body  Required parameter: License removal.
     * @return    Returns the V3LicenseAssignedRemovedResult wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<V3LicenseAssignedRemovedResult>> removeLicensesFromDevicesAsync(
            final String acc,
            final V3LicenseIMEI body) {
        try { 
            return prepareRemoveLicensesFromDevicesRequest(acc, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for removeLicensesFromDevices.
     */
    private ApiCall<ApiResponse<V3LicenseAssignedRemovedResult>, ApiException> prepareRemoveLicensesFromDevicesRequest(
            final String acc,
            final V3LicenseIMEI body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ApiResponse<V3LicenseAssignedRemovedResult>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V3.value())
                        .path("/licenses/{acc}/remove")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("acc").value(acc)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .and(andAuth -> andAuth
                                        .add("thingspace_oauth")
                                        .add("VZ-M2M-Token")))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, V3LicenseAssignedRemovedResult.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV3ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}