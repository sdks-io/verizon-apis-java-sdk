/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.FotaV2ResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.DeviceSoftwareUpgrade;
import com.verizon.m5gedge.models.SoftwarePackage;
import com.verizon.m5gedge.models.V2AccountDeviceList;
import com.verizon.m5gedge.models.V2CampaignDevice;
import com.verizon.m5gedge.models.V2CampaignHistory;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SoftwareManagementReportsV2Controller extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SoftwareManagementReportsV2Controller(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * The device endpoint gets devices information of an account.
     * @param  account  Required parameter: Account identifier.
     * @param  lastSeenDeviceId  Optional parameter: Last seen device identifier.
     * @param  distributionType  Optional parameter: Filter distributionType to get specific type of
     *         devices. Values is LWM2M, OMD-DM or HTTP.
     * @return    Returns the V2AccountDeviceList wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<V2AccountDeviceList> listAccountDevices(
            final String account,
            final String lastSeenDeviceId,
            final String distributionType) throws ApiException, IOException {
        return prepareListAccountDevicesRequest(account, lastSeenDeviceId,
                distributionType).execute();
    }

    /**
     * The device endpoint gets devices information of an account.
     * @param  account  Required parameter: Account identifier.
     * @param  lastSeenDeviceId  Optional parameter: Last seen device identifier.
     * @param  distributionType  Optional parameter: Filter distributionType to get specific type of
     *         devices. Values is LWM2M, OMD-DM or HTTP.
     * @return    Returns the V2AccountDeviceList wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<V2AccountDeviceList>> listAccountDevicesAsync(
            final String account,
            final String lastSeenDeviceId,
            final String distributionType) {
        try { 
            return prepareListAccountDevicesRequest(account, lastSeenDeviceId,
            distributionType).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listAccountDevices.
     */
    private ApiCall<ApiResponse<V2AccountDeviceList>, ApiException> prepareListAccountDevicesRequest(
            final String account,
            final String lastSeenDeviceId,
            final String distributionType) throws IOException {
        return new ApiCall.Builder<ApiResponse<V2AccountDeviceList>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V2.value())
                        .path("/devices/{account}")
                        .queryParam(param -> param.key("lastSeenDeviceId")
                                .value(lastSeenDeviceId).isRequired(false))
                        .queryParam(param -> param.key("distributionType")
                                .value(distributionType).isRequired(false))
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, V2AccountDeviceList.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV2ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * The endpoint allows user to get software upgrade history of a device based on device IMEI.
     * @param  account  Required parameter: Account identifier.
     * @param  deviceId  Required parameter: Device IMEI identifier.
     * @return    Returns the List of DeviceSoftwareUpgrade wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<DeviceSoftwareUpgrade>> getDeviceFirmwareUpgradeHistory(
            final String account,
            final String deviceId) throws ApiException, IOException {
        return prepareGetDeviceFirmwareUpgradeHistoryRequest(account, deviceId).execute();
    }

    /**
     * The endpoint allows user to get software upgrade history of a device based on device IMEI.
     * @param  account  Required parameter: Account identifier.
     * @param  deviceId  Required parameter: Device IMEI identifier.
     * @return    Returns the List of DeviceSoftwareUpgrade wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<DeviceSoftwareUpgrade>>> getDeviceFirmwareUpgradeHistoryAsync(
            final String account,
            final String deviceId) {
        try { 
            return prepareGetDeviceFirmwareUpgradeHistoryRequest(account, deviceId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getDeviceFirmwareUpgradeHistory.
     */
    private ApiCall<ApiResponse<List<DeviceSoftwareUpgrade>>, ApiException> prepareGetDeviceFirmwareUpgradeHistoryRequest(
            final String account,
            final String deviceId) throws IOException {
        return new ApiCall.Builder<ApiResponse<List<DeviceSoftwareUpgrade>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V2.value())
                        .path("/reports/{account}/devices/{deviceId}")
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("deviceId").value(deviceId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        DeviceSoftwareUpgrade[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV2ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * The report endpoint allows user to get campaign history of an account for specified status.
     * @param  account  Required parameter: Account identifier.
     * @param  campaignStatus  Required parameter: Status of the campaign.
     * @param  lastSeenCampaignId  Optional parameter: Last seen campaign Id.
     * @return    Returns the V2CampaignHistory wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<V2CampaignHistory> getCampaignHistoryByStatus(
            final String account,
            final String campaignStatus,
            final String lastSeenCampaignId) throws ApiException, IOException {
        return prepareGetCampaignHistoryByStatusRequest(account, campaignStatus,
                lastSeenCampaignId).execute();
    }

    /**
     * The report endpoint allows user to get campaign history of an account for specified status.
     * @param  account  Required parameter: Account identifier.
     * @param  campaignStatus  Required parameter: Status of the campaign.
     * @param  lastSeenCampaignId  Optional parameter: Last seen campaign Id.
     * @return    Returns the V2CampaignHistory wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<V2CampaignHistory>> getCampaignHistoryByStatusAsync(
            final String account,
            final String campaignStatus,
            final String lastSeenCampaignId) {
        try { 
            return prepareGetCampaignHistoryByStatusRequest(account, campaignStatus,
            lastSeenCampaignId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getCampaignHistoryByStatus.
     */
    private ApiCall<ApiResponse<V2CampaignHistory>, ApiException> prepareGetCampaignHistoryByStatusRequest(
            final String account,
            final String campaignStatus,
            final String lastSeenCampaignId) throws IOException {
        return new ApiCall.Builder<ApiResponse<V2CampaignHistory>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V2.value())
                        .path("/reports/{account}/campaigns")
                        .queryParam(param -> param.key("campaignStatus")
                                .value(campaignStatus))
                        .queryParam(param -> param.key("lastSeenCampaignId")
                                .value(lastSeenCampaignId).isRequired(false))
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, V2CampaignHistory.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV2ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * The report endpoint allows user to get the full list of device of a campaign.
     * @param  account  Required parameter: Account identifier.
     * @param  campaignId  Required parameter: Campaign identifier.
     * @param  lastSeenDeviceId  Optional parameter: Last seen device identifier.
     * @return    Returns the V2CampaignDevice wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<V2CampaignDevice> getCampaignDeviceStatus(
            final String account,
            final String campaignId,
            final String lastSeenDeviceId) throws ApiException, IOException {
        return prepareGetCampaignDeviceStatusRequest(account, campaignId,
                lastSeenDeviceId).execute();
    }

    /**
     * The report endpoint allows user to get the full list of device of a campaign.
     * @param  account  Required parameter: Account identifier.
     * @param  campaignId  Required parameter: Campaign identifier.
     * @param  lastSeenDeviceId  Optional parameter: Last seen device identifier.
     * @return    Returns the V2CampaignDevice wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<V2CampaignDevice>> getCampaignDeviceStatusAsync(
            final String account,
            final String campaignId,
            final String lastSeenDeviceId) {
        try { 
            return prepareGetCampaignDeviceStatusRequest(account, campaignId,
            lastSeenDeviceId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getCampaignDeviceStatus.
     */
    private ApiCall<ApiResponse<V2CampaignDevice>, ApiException> prepareGetCampaignDeviceStatusRequest(
            final String account,
            final String campaignId,
            final String lastSeenDeviceId) throws IOException {
        return new ApiCall.Builder<ApiResponse<V2CampaignDevice>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V2.value())
                        .path("/reports/{account}/campaigns/{campaignId}/devices")
                        .queryParam(param -> param.key("lastSeenDeviceId")
                                .value(lastSeenDeviceId).isRequired(false))
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("campaignId").value(campaignId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, V2CampaignDevice.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV2ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint allows user to list a certain type of software of an account.
     * @param  account  Required parameter: Account identifier.
     * @param  distributionType  Optional parameter: Filter distributionType to get specific type of
     *         software. Value is LWM2M, OMD-DM or HTTP.
     * @return    Returns the List of SoftwarePackage wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<List<SoftwarePackage>> listAvailableSoftware(
            final String account,
            final String distributionType) throws ApiException, IOException {
        return prepareListAvailableSoftwareRequest(account, distributionType).execute();
    }

    /**
     * This endpoint allows user to list a certain type of software of an account.
     * @param  account  Required parameter: Account identifier.
     * @param  distributionType  Optional parameter: Filter distributionType to get specific type of
     *         software. Value is LWM2M, OMD-DM or HTTP.
     * @return    Returns the List of SoftwarePackage wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<List<SoftwarePackage>>> listAvailableSoftwareAsync(
            final String account,
            final String distributionType) {
        try { 
            return prepareListAvailableSoftwareRequest(account, distributionType).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listAvailableSoftware.
     */
    private ApiCall<ApiResponse<List<SoftwarePackage>>, ApiException> prepareListAvailableSoftwareRequest(
            final String account,
            final String distributionType) throws IOException {
        return new ApiCall.Builder<ApiResponse<List<SoftwarePackage>>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V2.value())
                        .path("/software/{account}")
                        .queryParam(param -> param.key("distributionType")
                                .value(distributionType).isRequired(false))
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        SoftwarePackage[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV2ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}