/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.controllers;

import com.verizon.m5gedge.ApiHelper;
import com.verizon.m5gedge.Server;
import com.verizon.m5gedge.exceptions.ApiException;
import com.verizon.m5gedge.exceptions.FotaV1ResultException;
import com.verizon.m5gedge.http.request.HttpMethod;
import com.verizon.m5gedge.http.response.ApiResponse;
import com.verizon.m5gedge.models.AccountLicenseInfo;
import com.verizon.m5gedge.models.V1AccountSubscription;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SoftwareManagementSubscriptionsV1Controller extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SoftwareManagementSubscriptionsV1Controller(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns information about an account's Software Management Services licenses and a list of
     * licensed devices.
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  startIndex  Required parameter: The zero-based number of the first record to return.
     *         Set startIndex=0 for the first request. If there are more than 1,000 devices in the
     *         response, set startIndex=1000 for the second request, 2000 for the third request,
     *         etc.
     * @return    Returns the AccountLicenseInfo wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<AccountLicenseInfo> getAccountLicenseStatus(
            final String account,
            final String startIndex) throws ApiException, IOException {
        return prepareGetAccountLicenseStatusRequest(account, startIndex).execute();
    }

    /**
     * Returns information about an account's Software Management Services licenses and a list of
     * licensed devices.
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @param  startIndex  Required parameter: The zero-based number of the first record to return.
     *         Set startIndex=0 for the first request. If there are more than 1,000 devices in the
     *         response, set startIndex=1000 for the second request, 2000 for the third request,
     *         etc.
     * @return    Returns the AccountLicenseInfo wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<AccountLicenseInfo>> getAccountLicenseStatusAsync(
            final String account,
            final String startIndex) {
        try { 
            return prepareGetAccountLicenseStatusRequest(account, startIndex).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getAccountLicenseStatus.
     */
    private ApiCall<ApiResponse<AccountLicenseInfo>, ApiException> prepareGetAccountLicenseStatusRequest(
            final String account,
            final String startIndex) throws IOException {
        return new ApiCall.Builder<ApiResponse<AccountLicenseInfo>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V1.value())
                        .path("/licenses/{account}/index/{startIndex}")
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("startIndex").value(startIndex)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, AccountLicenseInfo.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV1ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This subscriptions endpoint retrieves an account's current Software Management Service
     * subscription status.
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @return    Returns the V1AccountSubscription wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<V1AccountSubscription> getAccountSubscriptionStatus(
            final String account) throws ApiException, IOException {
        return prepareGetAccountSubscriptionStatusRequest(account).execute();
    }

    /**
     * This subscriptions endpoint retrieves an account's current Software Management Service
     * subscription status.
     * @param  account  Required parameter: Account identifier in "##########-#####".
     * @return    Returns the V1AccountSubscription wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<V1AccountSubscription>> getAccountSubscriptionStatusAsync(
            final String account) {
        try { 
            return prepareGetAccountSubscriptionStatusRequest(account).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getAccountSubscriptionStatus.
     */
    private ApiCall<ApiResponse<V1AccountSubscription>, ApiException> prepareGetAccountSubscriptionStatusRequest(
            final String account) throws IOException {
        return new ApiCall.Builder<ApiResponse<V1AccountSubscription>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SOFTWARE_MANAGEMENT_V1.value())
                        .path("/subscriptions/{account}")
                        .templateParam(param -> param.key("account").value(account)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("oAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, V1AccountSubscription.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Unexpected error.",
                                (reason, context) -> new FotaV1ResultException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}