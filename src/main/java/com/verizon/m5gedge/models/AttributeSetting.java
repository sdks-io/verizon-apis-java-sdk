/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.verizon.m5gedge.DateTimeHelper;
import java.time.LocalDateTime;

/**
 * This is a model class for AttributeSetting type.
 */
public class AttributeSetting {
    private AttributeIdentifierEnum name;
    private String value;
    private LocalDateTime createdOn;
    private Boolean isObservable;
    private Boolean isObserving;
    private NumericalData frequency;

    /**
     * Default constructor.
     */
    public AttributeSetting() {
    }

    /**
     * Initialization constructor.
     * @param  name  AttributeIdentifierEnum value for name.
     * @param  value  String value for value.
     * @param  createdOn  LocalDateTime value for createdOn.
     * @param  isObservable  Boolean value for isObservable.
     * @param  isObserving  Boolean value for isObserving.
     * @param  frequency  NumericalData value for frequency.
     */
    public AttributeSetting(
            AttributeIdentifierEnum name,
            String value,
            LocalDateTime createdOn,
            Boolean isObservable,
            Boolean isObserving,
            NumericalData frequency) {
        this.name = name;
        this.value = value;
        this.createdOn = createdOn;
        this.isObservable = isObservable;
        this.isObserving = isObserving;
        this.frequency = frequency;
    }

    /**
     * Getter for Name.
     * Attribute identifier.
     * @return Returns the AttributeIdentifierEnum
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AttributeIdentifierEnum getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Attribute identifier.
     * @param name Value for AttributeIdentifierEnum
     */
    @JsonSetter("name")
    public void setName(AttributeIdentifierEnum name) {
        this.name = name;
    }

    /**
     * Getter for Value.
     * Attribute value.
     * @return Returns the String
     */
    @JsonGetter("value")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getValue() {
        return value;
    }

    /**
     * Setter for Value.
     * Attribute value.
     * @param value Value for String
     */
    @JsonSetter("value")
    public void setValue(String value) {
        this.value = value;
    }

    /**
     * Getter for CreatedOn.
     * Date and time request was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("createdOn")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreatedOn() {
        return createdOn;
    }

    /**
     * Setter for CreatedOn.
     * Date and time request was created.
     * @param createdOn Value for LocalDateTime
     */
    @JsonSetter("createdOn")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreatedOn(LocalDateTime createdOn) {
        this.createdOn = createdOn;
    }

    /**
     * Getter for IsObservable.
     * Is the attribute observable?
     * @return Returns the Boolean
     */
    @JsonGetter("isObservable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsObservable() {
        return isObservable;
    }

    /**
     * Setter for IsObservable.
     * Is the attribute observable?
     * @param isObservable Value for Boolean
     */
    @JsonSetter("isObservable")
    public void setIsObservable(Boolean isObservable) {
        this.isObservable = isObservable;
    }

    /**
     * Getter for IsObserving.
     * Is the attribute being observed?
     * @return Returns the Boolean
     */
    @JsonGetter("isObserving")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsObserving() {
        return isObserving;
    }

    /**
     * Setter for IsObserving.
     * Is the attribute being observed?
     * @param isObserving Value for Boolean
     */
    @JsonSetter("isObserving")
    public void setIsObserving(Boolean isObserving) {
        this.isObserving = isObserving;
    }

    /**
     * Getter for Frequency.
     * Describes value and unit of time.
     * @return Returns the NumericalData
     */
    @JsonGetter("frequency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public NumericalData getFrequency() {
        return frequency;
    }

    /**
     * Setter for Frequency.
     * Describes value and unit of time.
     * @param frequency Value for NumericalData
     */
    @JsonSetter("frequency")
    public void setFrequency(NumericalData frequency) {
        this.frequency = frequency;
    }

    /**
     * Converts this AttributeSetting into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AttributeSetting [" + "name=" + name + ", value=" + value + ", createdOn="
                + createdOn + ", isObservable=" + isObservable + ", isObserving=" + isObserving
                + ", frequency=" + frequency + "]";
    }

    /**
     * Builds a new {@link AttributeSetting.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link AttributeSetting.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .name(getName())
                .value(getValue())
                .createdOn(getCreatedOn())
                .isObservable(getIsObservable())
                .isObserving(getIsObserving())
                .frequency(getFrequency());
        return builder;
    }

    /**
     * Class to build instances of {@link AttributeSetting}.
     */
    public static class Builder {
        private AttributeIdentifierEnum name;
        private String value;
        private LocalDateTime createdOn;
        private Boolean isObservable;
        private Boolean isObserving;
        private NumericalData frequency;



        /**
         * Setter for name.
         * @param  name  AttributeIdentifierEnum value for name.
         * @return Builder
         */
        public Builder name(AttributeIdentifierEnum name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for value.
         * @param  value  String value for value.
         * @return Builder
         */
        public Builder value(String value) {
            this.value = value;
            return this;
        }

        /**
         * Setter for createdOn.
         * @param  createdOn  LocalDateTime value for createdOn.
         * @return Builder
         */
        public Builder createdOn(LocalDateTime createdOn) {
            this.createdOn = createdOn;
            return this;
        }

        /**
         * Setter for isObservable.
         * @param  isObservable  Boolean value for isObservable.
         * @return Builder
         */
        public Builder isObservable(Boolean isObservable) {
            this.isObservable = isObservable;
            return this;
        }

        /**
         * Setter for isObserving.
         * @param  isObserving  Boolean value for isObserving.
         * @return Builder
         */
        public Builder isObserving(Boolean isObserving) {
            this.isObserving = isObserving;
            return this;
        }

        /**
         * Setter for frequency.
         * @param  frequency  NumericalData value for frequency.
         * @return Builder
         */
        public Builder frequency(NumericalData frequency) {
            this.frequency = frequency;
            return this;
        }

        /**
         * Builds a new {@link AttributeSetting} object using the set fields.
         * @return {@link AttributeSetting}
         */
        public AttributeSetting build() {
            return new AttributeSetting(name, value, createdOn, isObservable, isObserving,
                    frequency);
        }
    }
}
