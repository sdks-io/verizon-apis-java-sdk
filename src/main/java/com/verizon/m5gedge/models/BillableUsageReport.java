/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for BillableUsageReport type.
 */
public class BillableUsageReport {
    private String accountName;
    private Boolean usageForAllAccounts;
    private String skuName;
    private String transactionsAllowed;
    private String totalTransactionCount;
    private ServiceUsage primaryAccount;
    private List<ServiceUsage> managedAccounts;

    /**
     * Default constructor.
     */
    public BillableUsageReport() {
    }

    /**
     * Initialization constructor.
     * @param  accountName  String value for accountName.
     * @param  usageForAllAccounts  Boolean value for usageForAllAccounts.
     * @param  skuName  String value for skuName.
     * @param  transactionsAllowed  String value for transactionsAllowed.
     * @param  totalTransactionCount  String value for totalTransactionCount.
     * @param  primaryAccount  ServiceUsage value for primaryAccount.
     * @param  managedAccounts  List of ServiceUsage value for managedAccounts.
     */
    public BillableUsageReport(
            String accountName,
            Boolean usageForAllAccounts,
            String skuName,
            String transactionsAllowed,
            String totalTransactionCount,
            ServiceUsage primaryAccount,
            List<ServiceUsage> managedAccounts) {
        this.accountName = accountName;
        this.usageForAllAccounts = usageForAllAccounts;
        this.skuName = skuName;
        this.transactionsAllowed = transactionsAllowed;
        this.totalTransactionCount = totalTransactionCount;
        this.primaryAccount = primaryAccount;
        this.managedAccounts = managedAccounts;
    }

    /**
     * Getter for AccountName.
     * Account identifier.
     * @return Returns the String
     */
    @JsonGetter("accountName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAccountName() {
        return accountName;
    }

    /**
     * Setter for AccountName.
     * Account identifier.
     * @param accountName Value for String
     */
    @JsonSetter("accountName")
    public void setAccountName(String accountName) {
        this.accountName = accountName;
    }

    /**
     * Getter for UsageForAllAccounts.
     * The usage is for a single or multiple accounts.
     * @return Returns the Boolean
     */
    @JsonGetter("usageForAllAccounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getUsageForAllAccounts() {
        return usageForAllAccounts;
    }

    /**
     * Setter for UsageForAllAccounts.
     * The usage is for a single or multiple accounts.
     * @param usageForAllAccounts Value for Boolean
     */
    @JsonSetter("usageForAllAccounts")
    public void setUsageForAllAccounts(Boolean usageForAllAccounts) {
        this.usageForAllAccounts = usageForAllAccounts;
    }

    /**
     * Getter for SkuName.
     * SKU Name of the service subscription.
     * @return Returns the String
     */
    @JsonGetter("skuName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSkuName() {
        return skuName;
    }

    /**
     * Setter for SkuName.
     * SKU Name of the service subscription.
     * @param skuName Value for String
     */
    @JsonSetter("skuName")
    public void setSkuName(String skuName) {
        this.skuName = skuName;
    }

    /**
     * Getter for TransactionsAllowed.
     * The number of location requests included with the subscription type.
     * @return Returns the String
     */
    @JsonGetter("transactionsAllowed")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTransactionsAllowed() {
        return transactionsAllowed;
    }

    /**
     * Setter for TransactionsAllowed.
     * The number of location requests included with the subscription type.
     * @param transactionsAllowed Value for String
     */
    @JsonSetter("transactionsAllowed")
    public void setTransactionsAllowed(String transactionsAllowed) {
        this.transactionsAllowed = transactionsAllowed;
    }

    /**
     * Getter for TotalTransactionCount.
     * The total number of billable device location requests during the reporting period from all
     * included accounts.
     * @return Returns the String
     */
    @JsonGetter("totalTransactionCount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTotalTransactionCount() {
        return totalTransactionCount;
    }

    /**
     * Setter for TotalTransactionCount.
     * The total number of billable device location requests during the reporting period from all
     * included accounts.
     * @param totalTransactionCount Value for String
     */
    @JsonSetter("totalTransactionCount")
    public void setTotalTransactionCount(String totalTransactionCount) {
        this.totalTransactionCount = totalTransactionCount;
    }

    /**
     * Getter for PrimaryAccount.
     * @return Returns the ServiceUsage
     */
    @JsonGetter("PrimaryAccount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ServiceUsage getPrimaryAccount() {
        return primaryAccount;
    }

    /**
     * Setter for PrimaryAccount.
     * @param primaryAccount Value for ServiceUsage
     */
    @JsonSetter("PrimaryAccount")
    public void setPrimaryAccount(ServiceUsage primaryAccount) {
        this.primaryAccount = primaryAccount;
    }

    /**
     * Getter for ManagedAccounts.
     * Zero or more managed accounts.
     * @return Returns the List of ServiceUsage
     */
    @JsonGetter("ManagedAccounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<ServiceUsage> getManagedAccounts() {
        return managedAccounts;
    }

    /**
     * Setter for ManagedAccounts.
     * Zero or more managed accounts.
     * @param managedAccounts Value for List of ServiceUsage
     */
    @JsonSetter("ManagedAccounts")
    public void setManagedAccounts(List<ServiceUsage> managedAccounts) {
        this.managedAccounts = managedAccounts;
    }

    /**
     * Converts this BillableUsageReport into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "BillableUsageReport [" + "accountName=" + accountName + ", usageForAllAccounts="
                + usageForAllAccounts + ", skuName=" + skuName + ", transactionsAllowed="
                + transactionsAllowed + ", totalTransactionCount=" + totalTransactionCount
                + ", primaryAccount=" + primaryAccount + ", managedAccounts=" + managedAccounts
                + "]";
    }

    /**
     * Builds a new {@link BillableUsageReport.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link BillableUsageReport.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .accountName(getAccountName())
                .usageForAllAccounts(getUsageForAllAccounts())
                .skuName(getSkuName())
                .transactionsAllowed(getTransactionsAllowed())
                .totalTransactionCount(getTotalTransactionCount())
                .primaryAccount(getPrimaryAccount())
                .managedAccounts(getManagedAccounts());
        return builder;
    }

    /**
     * Class to build instances of {@link BillableUsageReport}.
     */
    public static class Builder {
        private String accountName;
        private Boolean usageForAllAccounts;
        private String skuName;
        private String transactionsAllowed;
        private String totalTransactionCount;
        private ServiceUsage primaryAccount;
        private List<ServiceUsage> managedAccounts;



        /**
         * Setter for accountName.
         * @param  accountName  String value for accountName.
         * @return Builder
         */
        public Builder accountName(String accountName) {
            this.accountName = accountName;
            return this;
        }

        /**
         * Setter for usageForAllAccounts.
         * @param  usageForAllAccounts  Boolean value for usageForAllAccounts.
         * @return Builder
         */
        public Builder usageForAllAccounts(Boolean usageForAllAccounts) {
            this.usageForAllAccounts = usageForAllAccounts;
            return this;
        }

        /**
         * Setter for skuName.
         * @param  skuName  String value for skuName.
         * @return Builder
         */
        public Builder skuName(String skuName) {
            this.skuName = skuName;
            return this;
        }

        /**
         * Setter for transactionsAllowed.
         * @param  transactionsAllowed  String value for transactionsAllowed.
         * @return Builder
         */
        public Builder transactionsAllowed(String transactionsAllowed) {
            this.transactionsAllowed = transactionsAllowed;
            return this;
        }

        /**
         * Setter for totalTransactionCount.
         * @param  totalTransactionCount  String value for totalTransactionCount.
         * @return Builder
         */
        public Builder totalTransactionCount(String totalTransactionCount) {
            this.totalTransactionCount = totalTransactionCount;
            return this;
        }

        /**
         * Setter for primaryAccount.
         * @param  primaryAccount  ServiceUsage value for primaryAccount.
         * @return Builder
         */
        public Builder primaryAccount(ServiceUsage primaryAccount) {
            this.primaryAccount = primaryAccount;
            return this;
        }

        /**
         * Setter for managedAccounts.
         * @param  managedAccounts  List of ServiceUsage value for managedAccounts.
         * @return Builder
         */
        public Builder managedAccounts(List<ServiceUsage> managedAccounts) {
            this.managedAccounts = managedAccounts;
            return this;
        }

        /**
         * Builds a new {@link BillableUsageReport} object using the set fields.
         * @return {@link BillableUsageReport}
         */
        public BillableUsageReport build() {
            return new BillableUsageReport(accountName, usageForAllAccounts, skuName,
                    transactionsAllowed, totalTransactionCount, primaryAccount, managedAccounts);
        }
    }
}
