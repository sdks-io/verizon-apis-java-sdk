/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.verizon.m5gedge.DateTimeHelper;
import java.time.LocalDate;
import java.util.List;

/**
 * This is a model class for CampaignFirmwareUpgrade type.
 */
public class CampaignFirmwareUpgrade {
    private String campaignName;
    private String firmwareName;
    private String firmwareFrom;
    private String firmwareTo;
    private String protocol;
    private LocalDate startDate;
    private LocalDate endDate;
    private List<V3TimeWindow> campaignTimeWindowList;
    private List<String> deviceList;
    private boolean autoAssignLicenseFlag;
    private boolean autoAddDevicesFlag;

    /**
     * Default constructor.
     */
    public CampaignFirmwareUpgrade() {
        protocol = "LWM2M";
    }

    /**
     * Initialization constructor.
     * @param  firmwareName  String value for firmwareName.
     * @param  firmwareFrom  String value for firmwareFrom.
     * @param  firmwareTo  String value for firmwareTo.
     * @param  protocol  String value for protocol.
     * @param  startDate  LocalDate value for startDate.
     * @param  endDate  LocalDate value for endDate.
     * @param  deviceList  List of String value for deviceList.
     * @param  autoAssignLicenseFlag  boolean value for autoAssignLicenseFlag.
     * @param  autoAddDevicesFlag  boolean value for autoAddDevicesFlag.
     * @param  campaignName  String value for campaignName.
     * @param  campaignTimeWindowList  List of V3TimeWindow value for campaignTimeWindowList.
     */
    public CampaignFirmwareUpgrade(
            String firmwareName,
            String firmwareFrom,
            String firmwareTo,
            String protocol,
            LocalDate startDate,
            LocalDate endDate,
            List<String> deviceList,
            boolean autoAssignLicenseFlag,
            boolean autoAddDevicesFlag,
            String campaignName,
            List<V3TimeWindow> campaignTimeWindowList) {
        this.campaignName = campaignName;
        this.firmwareName = firmwareName;
        this.firmwareFrom = firmwareFrom;
        this.firmwareTo = firmwareTo;
        this.protocol = protocol;
        this.startDate = startDate;
        this.endDate = endDate;
        this.campaignTimeWindowList = campaignTimeWindowList;
        this.deviceList = deviceList;
        this.autoAssignLicenseFlag = autoAssignLicenseFlag;
        this.autoAddDevicesFlag = autoAddDevicesFlag;
    }

    /**
     * Getter for CampaignName.
     * Campaign name.
     * @return Returns the String
     */
    @JsonGetter("campaignName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCampaignName() {
        return campaignName;
    }

    /**
     * Setter for CampaignName.
     * Campaign name.
     * @param campaignName Value for String
     */
    @JsonSetter("campaignName")
    public void setCampaignName(String campaignName) {
        this.campaignName = campaignName;
    }

    /**
     * Getter for FirmwareName.
     * Firmware name to upgrade to.
     * @return Returns the String
     */
    @JsonGetter("firmwareName")
    public String getFirmwareName() {
        return firmwareName;
    }

    /**
     * Setter for FirmwareName.
     * Firmware name to upgrade to.
     * @param firmwareName Value for String
     */
    @JsonSetter("firmwareName")
    public void setFirmwareName(String firmwareName) {
        this.firmwareName = firmwareName;
    }

    /**
     * Getter for FirmwareFrom.
     * Old firmware version.
     * @return Returns the String
     */
    @JsonGetter("firmwareFrom")
    public String getFirmwareFrom() {
        return firmwareFrom;
    }

    /**
     * Setter for FirmwareFrom.
     * Old firmware version.
     * @param firmwareFrom Value for String
     */
    @JsonSetter("firmwareFrom")
    public void setFirmwareFrom(String firmwareFrom) {
        this.firmwareFrom = firmwareFrom;
    }

    /**
     * Getter for FirmwareTo.
     * New firmware version.
     * @return Returns the String
     */
    @JsonGetter("firmwareTo")
    public String getFirmwareTo() {
        return firmwareTo;
    }

    /**
     * Setter for FirmwareTo.
     * New firmware version.
     * @param firmwareTo Value for String
     */
    @JsonSetter("firmwareTo")
    public void setFirmwareTo(String firmwareTo) {
        this.firmwareTo = firmwareTo;
    }

    /**
     * Getter for Protocol.
     * Valid values include: LWM2M, OMA and HTTP.
     * @return Returns the String
     */
    @JsonGetter("protocol")
    public String getProtocol() {
        return protocol;
    }

    /**
     * Setter for Protocol.
     * Valid values include: LWM2M, OMA and HTTP.
     * @param protocol Value for String
     */
    @JsonSetter("protocol")
    public void setProtocol(String protocol) {
        this.protocol = protocol;
    }

    /**
     * Getter for StartDate.
     * Campaign start date.
     * @return Returns the LocalDate
     */
    @JsonGetter("startDate")
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getStartDate() {
        return startDate;
    }

    /**
     * Setter for StartDate.
     * Campaign start date.
     * @param startDate Value for LocalDate
     */
    @JsonSetter("startDate")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setStartDate(LocalDate startDate) {
        this.startDate = startDate;
    }

    /**
     * Getter for EndDate.
     * Campaign end date.
     * @return Returns the LocalDate
     */
    @JsonGetter("endDate")
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getEndDate() {
        return endDate;
    }

    /**
     * Setter for EndDate.
     * Campaign end date.
     * @param endDate Value for LocalDate
     */
    @JsonSetter("endDate")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setEndDate(LocalDate endDate) {
        this.endDate = endDate;
    }

    /**
     * Getter for CampaignTimeWindowList.
     * List of allowed campaign time windows.
     * @return Returns the List of V3TimeWindow
     */
    @JsonGetter("campaignTimeWindowList")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<V3TimeWindow> getCampaignTimeWindowList() {
        return campaignTimeWindowList;
    }

    /**
     * Setter for CampaignTimeWindowList.
     * List of allowed campaign time windows.
     * @param campaignTimeWindowList Value for List of V3TimeWindow
     */
    @JsonSetter("campaignTimeWindowList")
    public void setCampaignTimeWindowList(List<V3TimeWindow> campaignTimeWindowList) {
        this.campaignTimeWindowList = campaignTimeWindowList;
    }

    /**
     * Getter for DeviceList.
     * Device IMEI list.
     * @return Returns the List of String
     */
    @JsonGetter("deviceList")
    public List<String> getDeviceList() {
        return deviceList;
    }

    /**
     * Setter for DeviceList.
     * Device IMEI list.
     * @param deviceList Value for List of String
     */
    @JsonSetter("deviceList")
    public void setDeviceList(List<String> deviceList) {
        this.deviceList = deviceList;
    }

    /**
     * Getter for AutoAssignLicenseFlag.
     * This flag, when set to true, will assign a FOTA license automatically if the device does not
     * have one already.
     * @return Returns the boolean
     */
    @JsonGetter("autoAssignLicenseFlag")
    public boolean getAutoAssignLicenseFlag() {
        return autoAssignLicenseFlag;
    }

    /**
     * Setter for AutoAssignLicenseFlag.
     * This flag, when set to true, will assign a FOTA license automatically if the device does not
     * have one already.
     * @param autoAssignLicenseFlag Value for boolean
     */
    @JsonSetter("autoAssignLicenseFlag")
    public void setAutoAssignLicenseFlag(boolean autoAssignLicenseFlag) {
        this.autoAssignLicenseFlag = autoAssignLicenseFlag;
    }

    /**
     * Getter for AutoAddDevicesFlag.
     * this flag, when set to true, will automatically add a device of the same make and model to a
     * campaign.
     * @return Returns the boolean
     */
    @JsonGetter("autoAddDevicesFlag")
    public boolean getAutoAddDevicesFlag() {
        return autoAddDevicesFlag;
    }

    /**
     * Setter for AutoAddDevicesFlag.
     * this flag, when set to true, will automatically add a device of the same make and model to a
     * campaign.
     * @param autoAddDevicesFlag Value for boolean
     */
    @JsonSetter("autoAddDevicesFlag")
    public void setAutoAddDevicesFlag(boolean autoAddDevicesFlag) {
        this.autoAddDevicesFlag = autoAddDevicesFlag;
    }

    /**
     * Converts this CampaignFirmwareUpgrade into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CampaignFirmwareUpgrade [" + "firmwareName=" + firmwareName + ", firmwareFrom="
                + firmwareFrom + ", firmwareTo=" + firmwareTo + ", protocol=" + protocol
                + ", startDate=" + startDate + ", endDate=" + endDate + ", deviceList=" + deviceList
                + ", autoAssignLicenseFlag=" + autoAssignLicenseFlag + ", autoAddDevicesFlag="
                + autoAddDevicesFlag + ", campaignName=" + campaignName
                + ", campaignTimeWindowList=" + campaignTimeWindowList + "]";
    }

    /**
     * Builds a new {@link CampaignFirmwareUpgrade.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CampaignFirmwareUpgrade.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(firmwareName, firmwareFrom, firmwareTo, protocol, startDate,
                endDate, deviceList, autoAssignLicenseFlag, autoAddDevicesFlag)
                .campaignName(getCampaignName())
                .campaignTimeWindowList(getCampaignTimeWindowList());
        return builder;
    }

    /**
     * Class to build instances of {@link CampaignFirmwareUpgrade}.
     */
    public static class Builder {
        private String firmwareName;
        private String firmwareFrom;
        private String firmwareTo;
        private String protocol = "LWM2M";
        private LocalDate startDate;
        private LocalDate endDate;
        private List<String> deviceList;
        private boolean autoAssignLicenseFlag;
        private boolean autoAddDevicesFlag;
        private String campaignName;
        private List<V3TimeWindow> campaignTimeWindowList;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  firmwareName  String value for firmwareName.
         * @param  firmwareFrom  String value for firmwareFrom.
         * @param  firmwareTo  String value for firmwareTo.
         * @param  protocol  String value for protocol.
         * @param  startDate  LocalDate value for startDate.
         * @param  endDate  LocalDate value for endDate.
         * @param  deviceList  List of String value for deviceList.
         * @param  autoAssignLicenseFlag  boolean value for autoAssignLicenseFlag.
         * @param  autoAddDevicesFlag  boolean value for autoAddDevicesFlag.
         */
        public Builder(String firmwareName, String firmwareFrom, String firmwareTo, String protocol,
                LocalDate startDate, LocalDate endDate, List<String> deviceList,
                boolean autoAssignLicenseFlag, boolean autoAddDevicesFlag) {
            this.firmwareName = firmwareName;
            this.firmwareFrom = firmwareFrom;
            this.firmwareTo = firmwareTo;
            this.protocol = protocol;
            this.startDate = startDate;
            this.endDate = endDate;
            this.deviceList = deviceList;
            this.autoAssignLicenseFlag = autoAssignLicenseFlag;
            this.autoAddDevicesFlag = autoAddDevicesFlag;
        }

        /**
         * Setter for firmwareName.
         * @param  firmwareName  String value for firmwareName.
         * @return Builder
         */
        public Builder firmwareName(String firmwareName) {
            this.firmwareName = firmwareName;
            return this;
        }

        /**
         * Setter for firmwareFrom.
         * @param  firmwareFrom  String value for firmwareFrom.
         * @return Builder
         */
        public Builder firmwareFrom(String firmwareFrom) {
            this.firmwareFrom = firmwareFrom;
            return this;
        }

        /**
         * Setter for firmwareTo.
         * @param  firmwareTo  String value for firmwareTo.
         * @return Builder
         */
        public Builder firmwareTo(String firmwareTo) {
            this.firmwareTo = firmwareTo;
            return this;
        }

        /**
         * Setter for protocol.
         * @param  protocol  String value for protocol.
         * @return Builder
         */
        public Builder protocol(String protocol) {
            this.protocol = protocol;
            return this;
        }

        /**
         * Setter for startDate.
         * @param  startDate  LocalDate value for startDate.
         * @return Builder
         */
        public Builder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }

        /**
         * Setter for endDate.
         * @param  endDate  LocalDate value for endDate.
         * @return Builder
         */
        public Builder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }

        /**
         * Setter for deviceList.
         * @param  deviceList  List of String value for deviceList.
         * @return Builder
         */
        public Builder deviceList(List<String> deviceList) {
            this.deviceList = deviceList;
            return this;
        }

        /**
         * Setter for autoAssignLicenseFlag.
         * @param  autoAssignLicenseFlag  boolean value for autoAssignLicenseFlag.
         * @return Builder
         */
        public Builder autoAssignLicenseFlag(boolean autoAssignLicenseFlag) {
            this.autoAssignLicenseFlag = autoAssignLicenseFlag;
            return this;
        }

        /**
         * Setter for autoAddDevicesFlag.
         * @param  autoAddDevicesFlag  boolean value for autoAddDevicesFlag.
         * @return Builder
         */
        public Builder autoAddDevicesFlag(boolean autoAddDevicesFlag) {
            this.autoAddDevicesFlag = autoAddDevicesFlag;
            return this;
        }

        /**
         * Setter for campaignName.
         * @param  campaignName  String value for campaignName.
         * @return Builder
         */
        public Builder campaignName(String campaignName) {
            this.campaignName = campaignName;
            return this;
        }

        /**
         * Setter for campaignTimeWindowList.
         * @param  campaignTimeWindowList  List of V3TimeWindow value for campaignTimeWindowList.
         * @return Builder
         */
        public Builder campaignTimeWindowList(List<V3TimeWindow> campaignTimeWindowList) {
            this.campaignTimeWindowList = campaignTimeWindowList;
            return this;
        }

        /**
         * Builds a new {@link CampaignFirmwareUpgrade} object using the set fields.
         * @return {@link CampaignFirmwareUpgrade}
         */
        public CampaignFirmwareUpgrade build() {
            return new CampaignFirmwareUpgrade(firmwareName, firmwareFrom, firmwareTo, protocol,
                    startDate, endDate, deviceList, autoAssignLicenseFlag, autoAddDevicesFlag,
                    campaignName, campaignTimeWindowList);
        }
    }
}
