/*
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.verizon.m5gedge.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for GPU type.
 */
public class GPU {
    private Integer minCoreClockMHz;
    private Integer minMemoryClockMHz;
    private Integer minBandwidthGBs;
    private Integer minTFLOPS;

    /**
     * Default constructor.
     */
    public GPU() {
    }

    /**
     * Initialization constructor.
     * @param  minCoreClockMHz  Integer value for minCoreClockMHz.
     * @param  minMemoryClockMHz  Integer value for minMemoryClockMHz.
     * @param  minBandwidthGBs  Integer value for minBandwidthGBs.
     * @param  minTFLOPS  Integer value for minTFLOPS.
     */
    public GPU(
            Integer minCoreClockMHz,
            Integer minMemoryClockMHz,
            Integer minBandwidthGBs,
            Integer minTFLOPS) {
        this.minCoreClockMHz = minCoreClockMHz;
        this.minMemoryClockMHz = minMemoryClockMHz;
        this.minBandwidthGBs = minBandwidthGBs;
        this.minTFLOPS = minTFLOPS;
    }

    /**
     * Getter for MinCoreClockMHz.
     * Minimum Core Clock value in megahertz.
     * @return Returns the Integer
     */
    @JsonGetter("minCoreClockMHz")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMinCoreClockMHz() {
        return minCoreClockMHz;
    }

    /**
     * Setter for MinCoreClockMHz.
     * Minimum Core Clock value in megahertz.
     * @param minCoreClockMHz Value for Integer
     */
    @JsonSetter("minCoreClockMHz")
    public void setMinCoreClockMHz(Integer minCoreClockMHz) {
        this.minCoreClockMHz = minCoreClockMHz;
    }

    /**
     * Getter for MinMemoryClockMHz.
     * Minimum Memory Clock value in megahertz.
     * @return Returns the Integer
     */
    @JsonGetter("minMemoryClockMHz")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMinMemoryClockMHz() {
        return minMemoryClockMHz;
    }

    /**
     * Setter for MinMemoryClockMHz.
     * Minimum Memory Clock value in megahertz.
     * @param minMemoryClockMHz Value for Integer
     */
    @JsonSetter("minMemoryClockMHz")
    public void setMinMemoryClockMHz(Integer minMemoryClockMHz) {
        this.minMemoryClockMHz = minMemoryClockMHz;
    }

    /**
     * Getter for MinBandwidthGBs.
     * Minimum GPU bandwidth in GB/s.
     * @return Returns the Integer
     */
    @JsonGetter("minBandwidthGBs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMinBandwidthGBs() {
        return minBandwidthGBs;
    }

    /**
     * Setter for MinBandwidthGBs.
     * Minimum GPU bandwidth in GB/s.
     * @param minBandwidthGBs Value for Integer
     */
    @JsonSetter("minBandwidthGBs")
    public void setMinBandwidthGBs(Integer minBandwidthGBs) {
        this.minBandwidthGBs = minBandwidthGBs;
    }

    /**
     * Getter for MinTFLOPS.
     * Minimum Floating Point Operations Per Second in Teraflops.
     * @return Returns the Integer
     */
    @JsonGetter("minTFLOPS")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMinTFLOPS() {
        return minTFLOPS;
    }

    /**
     * Setter for MinTFLOPS.
     * Minimum Floating Point Operations Per Second in Teraflops.
     * @param minTFLOPS Value for Integer
     */
    @JsonSetter("minTFLOPS")
    public void setMinTFLOPS(Integer minTFLOPS) {
        this.minTFLOPS = minTFLOPS;
    }

    /**
     * Converts this GPU into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GPU [" + "minCoreClockMHz=" + minCoreClockMHz + ", minMemoryClockMHz="
                + minMemoryClockMHz + ", minBandwidthGBs=" + minBandwidthGBs + ", minTFLOPS="
                + minTFLOPS + "]";
    }

    /**
     * Builds a new {@link GPU.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link GPU.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .minCoreClockMHz(getMinCoreClockMHz())
                .minMemoryClockMHz(getMinMemoryClockMHz())
                .minBandwidthGBs(getMinBandwidthGBs())
                .minTFLOPS(getMinTFLOPS());
        return builder;
    }

    /**
     * Class to build instances of {@link GPU}.
     */
    public static class Builder {
        private Integer minCoreClockMHz;
        private Integer minMemoryClockMHz;
        private Integer minBandwidthGBs;
        private Integer minTFLOPS;



        /**
         * Setter for minCoreClockMHz.
         * @param  minCoreClockMHz  Integer value for minCoreClockMHz.
         * @return Builder
         */
        public Builder minCoreClockMHz(Integer minCoreClockMHz) {
            this.minCoreClockMHz = minCoreClockMHz;
            return this;
        }

        /**
         * Setter for minMemoryClockMHz.
         * @param  minMemoryClockMHz  Integer value for minMemoryClockMHz.
         * @return Builder
         */
        public Builder minMemoryClockMHz(Integer minMemoryClockMHz) {
            this.minMemoryClockMHz = minMemoryClockMHz;
            return this;
        }

        /**
         * Setter for minBandwidthGBs.
         * @param  minBandwidthGBs  Integer value for minBandwidthGBs.
         * @return Builder
         */
        public Builder minBandwidthGBs(Integer minBandwidthGBs) {
            this.minBandwidthGBs = minBandwidthGBs;
            return this;
        }

        /**
         * Setter for minTFLOPS.
         * @param  minTFLOPS  Integer value for minTFLOPS.
         * @return Builder
         */
        public Builder minTFLOPS(Integer minTFLOPS) {
            this.minTFLOPS = minTFLOPS;
            return this;
        }

        /**
         * Builds a new {@link GPU} object using the set fields.
         * @return {@link GPU}
         */
        public GPU build() {
            return new GPU(minCoreClockMHz, minMemoryClockMHz, minBandwidthGBs, minTFLOPS);
        }
    }
}
